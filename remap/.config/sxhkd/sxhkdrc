# Sxhkd
# https://github.com/windelicato/dotfiles/blob/master/.config/sxhkd/sxhkdrc
# TODO:
# .get bspwm reload working without getting rid windows and giving a useless empty window
# .navigate floating
# .universal resize?

# limits:
# .chaining isn't perfect (use xchainkeys instead)
# .can only use level 1 (unshifted) key for prefix (can use keys in layer with modifier though) 

# Reloading# {{{
# Reload bspwm
# super alt esc to reload; add shift to just quit
super + alt + {_,shift + }Escape
	{bspc query -T > "$BSPWM_TREE"; \
		bspc query -H > "$BSPWM_HISTORY"; \
			bspc quit && pkill panel,\
	 bspc quit 1}

# reload keyboad layout (if screw it up and can't type)
F11
	setxkbmap us -variant colemak && xmodmap ~/.Xmod_wide && xmodmap ~/.Xmodmap

# }}}

# General# {{{
# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd

# brightness# {{{
alt + e
	light -As "acpi_video0" 10
alt + n
	light -Us "acpi_video0" 10

# }}}

# volume # {{{
alt + i
	amixer -qD pulse sset Master 5%+
alt + h
	amixer -qD pulse sset Master 5%-
# mute
alt + m
	amixer -qD pulse sset Master toggle
# play/pause
alt + o
	mpc toggle
# next/prev
alt + u
	mpc prev
alt + y
	mpc next

# }}}

# Screenshots# {{{
Print
	~/bin/screenshot.sh

alt + p
	~/bin/screenshot.sh select

# }}}

# program hotkeys# {{{
super + Return
	termite

alt + f
	firefox

alt + space
	dmenu_run -fn 'Droid Sans Mono-10'

alt + v
	gvim

super + u
	xterm

# }}}

# clicks# {{{
alt + k
	xdotool mousemove 500 300 click 1 ; xdotool mousemove 0 0
	
alt + c
	xdotool mousemove 33 572 click 1

alt + C
	xdotool click 3

# regain focus from flash
alt + a
	xdotool mousemove 22 721 click 1
# regain from menu
alt + A
	xdotool mousemove 22 721 click 3
# }}}

# }}}

# Dropdown Terms# {{{
super + r
	guake -t

alt + r
	guake -t

alt + s
	hide_show -y 14 termite

alt + t
	hide_show urxvt

super + s
	hide_show -y 14 xterm

F1
	hide_show -y 14 Terminology

# }}}

# Window Management {{{
# General# {{{
# close
super + w
	bspc window -c

# kill
super + W
	bspc window -k

# cycle layout (monocle=kind of like fullscreen, but within normal area)
super + t
	bspc desktop -l next
# toggle fullscreen
super + T
	bspc window -t fullscreen

# }}}
# Selection# {{{

# window cycing
# super + {n,e}
# 	bspc window -f {next,prev}

# selection by direction
super + {h,n,e,i}
	bspc window -f {left,down,up,right}

# switch last window or desktop
super + {grave,Tab}
	bspc {window,desktop} -f last

# }}}
# Window Movement# {{{
# move selected window to biggest space
super + m
	bspc window -s biggest

# move window in direction
super + {H,N,E,I}
	bspc window -s {left,down,up,right}

# switch to last window
super + l
	bspc window -f last

# switch with last window (works across desktops)
super + apostrophe
	bspc window -s last

# toggle floating
super + f
	bspc window -t floating

# navigate to biggest floating window
super + F
	bspc window -f biggest.floating

# cycle windows forward and backward
super + {comma,period}
	bspc desktop -C {backward,forward}

# Circulate leaves of tree ; basically flip windows
alt + {comma,period}
	bspc desktop -F {horizontal,vertical}

# basically rotate windows, but keep relative size
alt + shift + {comma,period}
	bspc desktop -R {90,270}

# balance
super + b
	bspc desktop -B

# }}}
# Desktop Movement# {{{
# move between desktops ([])
# super + bracket{left,right}
# 	bspc desktop -f {prev,next}

# # Select previous / next desktop
# alt + {p,n}
# 	bspc desktop -f {prev.occupied,next.occupied} 

# change to desktop or move selected to desktop with shift
super + {_,shift + }{1-9,0}
	bspc {desktop -f,window -d} ^{1-9,10}

# }}}
# Resizing# {{{
# using caps layer hnei
super + Left
	bspc window --edge right -20 || bspc window --edge left -30
super + Right
	bspc window --edge right +20 || bspc window --edge left +30
super + Down
	bspc window --edge up +20 || bspc window --edge down +30
super + Up
	bspc window --edge up -20 || bspc window --edge down -30

# }}}
# Preselection# {{{
# direction to split 
super + p ; {h,n,e,i}
	bspc window -p {left,down,up,right}

# cancel.. current; all
super + p ; {_,shift + }space
	bspc {window -p cancel,desktop -c}

# }}}
# Adjustment# {{{
super + minus
	bspc config -d focused window_gap $((`bspc config -d focused window_gap` + 4 ))

super + equal
	bspc config -d focused window_gap $((`bspc config -d focused window_gap` - 4 ))

# set splitting ratio of current window
super + ctrl + {1-9}
	bspc window -r 0.{1-9}

# }}}
# Misc# {{{
# lock
super + L
	slimlock

# hide all windows
KP_Add
	bspc control --toggle-visibility
super + k
	bspc control --toggle-visibility

# }}}
# Mouse shit# {{{
# when in float, move and resize window
super + button{1-3}
	bspc pointer -g {move,resize_side,resize_corner}

super + !button{1-3}
	bspc pointer -t %i %i

super + @button{1-3}
	bspc pointer -u

~button1
	bspc pointer -g focus

# }}}
# }}}

# Prefix/Modal Bindings # {{{
# Notes on Modal Bindings:# {{{
# Unless fixed recently, sxhkd chaining doesn't work past a certain depth; having a key bound at a earlier level prevents it from being bound properly at a later level

# can't change escape key like in xchainkeys, but can do something like the following:
# have a mode entered with grave ; grave (have grave ; grave : letter bindings)
# q instead of escape to exit
# grave ; grave ; q
# 	xdotool key Escape
# 	# or some action

# used to be a bug where if you had:
# grave ; grave : u
# 	xterm
# the following binding would act like "grave ; grave : o"
# grave ; grave ; q
# 	xterm
# this would prevent the above "q for exit" example from working when used with an action other than faking an escape keypress

# there used to be a bug where if you had grave prefix bindings (e.g. "grave ; o") and added the following, double tapping grave would give about a 5 second period where you could access any "grave : letter" bindings
# grave ; grave : u
# 	bspc control --toggle-visibility

# }}}

# xchainkeys is better for; see example config:
# ../xchainkeys/xchainkeys.examplevimlayer.conf
# Example Modal Interface for Libre Office # {{{

# doesn't prevent escaping :(
# grave ; o : @Escape
# 	xdotool key Escape && xdotool key grave && xdotool key o

# Normal mode# {{{
# movement
# grave ; o : e
# 	xsendkey Up
# grave ; o : n 
# 	xsendkey Down
# grave  ; o : h
# 	xsendkey Left
# grave ; o : i
# 	xsendkey Right

# example of taking a count
# grave ; o : 5 : n
	# xsendkey Down && xsendkey Down && xsendkey Down && xsendkey Down && xsendkey Down
# potentially could do {1-9}; also note that if grave ; {anything including 5} is bound, this WILL NOT work

# by word
# grave ; o : w
# 	xsendkey Control+Right
# grave ; o : b
# 	xsendkey Control+Left

# gg and G
# grave ; o : g ; g 
# 	xsendkey Control+Home
# grave ; o : G
# 	xsendkey Control+End && sleep 0.1 && xsendkey Home

# search
# grave ; o : slash
# 	xsendkey Control+f; xdotool key Escape

# example finding; doesn't work without sleep (will search for blank)
# won't work with keys mapped in previous (i.e. i doesn't work after f if have grave ; o : i)
# not really worth implementing anyway
# grave ; o : f ; z
	# xsendkey Control+f && xdotool key Escape && sleep .2 && xsendkey z && xsendkey Return

#undo
# grave ; o : u
# 	xsendkey Control+z

# redo
# grave ; o : U
# 	xsendkey Control+y

# next suggestion 
# grave ; o : Tab
	# xsendkey Control+Tab

# save
# grave ; o : s
	# xsendkey Control+s

# }}}
 
#cut, copy, paste# {{{
# grave ; o : p
# 	xsendkey Control+v

# delete line (acting like d : d ..  d will keep deleting the ine)
#grave ; o : d ; d
#	xsendkey End && xsendkey Shift+Home && xsendkey Delete

# delete word; again, won't work with w
# grave ; o : d ; c
	# xsendkey Control+Shift+Right && xsendkey Control+x #xsendkey BackSpace

# delete to end of line
#grave ; o : D
#	xsendkey Shift+End && xsendkey BackSpace

# more vim like (delete to end of line without changing cursor position or bringing line from below up
# maybe not useful since concept of lines in word processor is difference
# grave ; o : D
# 	xsendkey Shift+End && xsendkey BackSpace && xsendkey Right && xsendkey Return && xsendkey Up && xsendkey End
#could also delete to end of sentence with Control+Shift+Delete

# could do all the same with yank (again, except for reusing letters)
# however can have both these without problem:
# also note that this won't work if positioned in middle of word (would have to add a control left before which would make it not working for the beginning of a word)
# grave ; o : d ; W
# 	xsendkey Control+Shift+Right && xsendkey Left && xsendkey Control+x
# grave ; o ; y ; W
# 	xsendkey Control+Shift+Right && xsendkey Left && xsendkey Control+c

# }}}

# Visual mode# {{{
# works fine with keys not mapped a chain before
# move up
# grave ; o : v : comma
# 	xsendkey Shift+Up
# down
# grave ; o : v : e 
	# xsendkey Shift+Down

# grave ; o : V : E
# 	xsendkey Home && xsendkey Control+Shift+Up

# grave ; o : V : N
# 	xsendkey Home && xsendkey Control+Shift+Down

# yanking; yank text and escape
# grave ; o : V : @Y
# get back into previous mode.. randomly inserts tilde?
	# xsendkey Control+c && xdotool key Escape && xdotool key grave && xdotool key o

# cutting text
# grave ; o : V : d(i wish)
	# xsendkey Control+x 

# }}}

# also see below for more specific shortcuts
# https://help.libreoffice.org/Writer/Shortcut_Keys_for_Writer
# }}}

# }}}

# Graveyard# {{{
# to do things with xdotool like so need @ (not so with xsendkey)
# grave ;o : @P
    # xdotool key --clearmodifiers ctrl+v

# with xte
# alt + @F2
    # xte 'keyup Alt_L' 'keyup Alt_R' 'keydown Control_L' 'key c' 'keyup Control_L'
# or? 
# @Num_Lock
    # xte 'keydown Control_L' 'key c' 'keyup Control_L'
# }}}
