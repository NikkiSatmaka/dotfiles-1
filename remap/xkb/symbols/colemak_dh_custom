// Generated by KLFC 1.5.7
// https://github.com/39aldo39/klfc

default
xkb_symbols "basic" {
    key <TLDE> { [   VoidSymbol,   VoidSymbol ] };
    key <AE01> { [            1,       exclam ] };
    key <AE02> { [            2,           at ] };
    key <AE03> { [            3,   numbersign ] };
    key <AE04> { [            4,       dollar ] };
    key <AE05> { [            5,      percent ] };
    key <AE06> { [            6,  asciicircum ] };
    key <AE07> { [            7,    ampersand ] };
    key <AE08> { [            8,     asterisk ] };
    key <AE09> { [            9,    parenleft ] };
    key <AE10> { [            0,   parenright ] };
    key <AE11> { [        minus,   underscore, XF86_Switch_VT_11 ],
                 actions[Group1] = [ NoAction(), NoAction(), SwitchScreen(Screen=11, !same) ] };
    key <AE12> { [        equal,         plus, XF86_Switch_VT_12 ],
                 actions[Group1] = [ NoAction(), NoAction(), SwitchScreen(Screen=12, !same) ] };
    key <AD01> { [            q,            Q,        grave,   asciitilde ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AD02> { [            w,            W,        equal,        equal,    BackSpace ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), Redirect(key=<AD02>,mods=Control) ] };
    key.type[Group1] = "FOUR_LEVEL_ALPHABETIC";
    key <AD03> { [            f,            F, bracketright, bracketright ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AD04> { [            p,            P,   underscore,   underscore,        Print ] };
    key.type[Group1] = "FOUR_LEVEL_ALPHABETIC";
    key <AD05> { [            b,            B,    backslash,    backslash ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AD06> { [            j,            J,           at,           at, XF86MonBrightnessDown ] };
    key <AD07> { [            l,            L,        minus,        minus,         Next ] };
    key <AD08> { [            u,            U,   parenright,   parenright,         Home ] };
    key <AD09> { [            y,            Y,   braceright,   braceright,          End ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <AD10> { [    semicolon,        colon,       exclam,       exclam,        Prior ] };
    key.type[Group1] = "TWO_LEVEL";
    key <AD11> { [  bracketleft,    braceleft ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <AD12> { [ bracketright,   braceright,   VoidSymbol,   VoidSymbol, XF86MonBrightnessUp ] };
    key.type[Group1] = "TWO_LEVEL";
    key <BKSL> { [   apostrophe,     quotedbl ] };
    key.type[Group1] = "FOUR_LEVEL_ALPHABETIC";
    key <AC01> { [            a,            A,            1,       exclam ] };
    key <AC02> { [            r,            R,            2,           at ] };
    key <AC03> { [            s,            S,            3,   numbersign ] };
    key <AC04> { [            t,            T,            4,       dollar ] };
    key <AC05> { [            g,            G,          bar,          bar ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AC06> { [            k,            K,    ampersand,    ampersand, XF86AudioNext ] };
    key <AC07> { [            n,            N,            7,    ampersand,         Down ] };
    key <AC08> { [            e,            E,            8,     asterisk,           Up ] };
    key <AC09> { [            i,            I,            9,    parenleft,        Right ] };
    key <AC10> { [            o,            O,            0,   parenright, XF86AudioPlay ] };
    key.type[Group1] = "TWO_LEVEL";
    key <AC11> { [   apostrophe,     quotedbl ] };
    key.type[Group1] = "FOUR_LEVEL_ALPHABETIC";
    key <AB01> { [            x,            X,   asciitilde,   asciitilde ] };
    key <AB02> { [            c,            C,   numbersign,   numbersign ] };
    key <AB03> { [            d,            D,            5,      percent ] };
    key <AB04> { [            v,            V,  asciicircum,  asciicircum ] };
    key.type[Group1] = "ALPHABETIC";
    key <AB05> { [            z,            Z ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AB06> { [            m,            M,       dollar,       dollar, XF86AudioMute ] };
    key <AB07> { [            h,            H,            6,  asciicircum,         Left ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <AB08> { [        comma,         less,     asterisk,     asterisk, XF86AudioLowerVolume ] };
    key <AB09> { [       period,      greater,         plus,         plus, XF86AudioRaiseVolume ] };
    key.type[Group1] = "FOUR_LEVEL";
    key <AB10> { [        slash,     question,      percent,      percent ] };
    key.type[Group1] = "ONE_LEVEL";
    key <CAPS> { [ ISO_Level5_Shift ],
                 actions[Group1] = [ SetMods(mods=LevelFive) ],
                 vmods=LevelFive };
    key <LWIN> { [    Control_L ],
                 actions[Group1] = [ SetMods(mods=Control) ] };
    key <LCTL> { [      Super_L ],
                 actions[Group1] = [ SetMods(mods=Super) ],
                 vmods=Super };
    key <KPSU> { [    Caps_Lock ],
                 actions[Group1] = [ LockMods(mods=Lock) ] };
    key <LALT> { [      Shift_L ],
                 actions[Group1] = [ SetMods(mods=Shift) ] };
    key <PRSC> { [        Alt_L ],
                 actions[Group1] = [ SetMods(mods=Alt) ],
                 vmods=Alt };
    modifier_map Mod3 { ISO_Level5_Shift };
    include "level3(ralt_switch)"
};
