#!/usr/bin/env bash
# base panel script:
# https://github.com/baskerville/bspwm/blob/master/examples/panel/panel

if xdo id -a the_panel > /dev/null ; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi

# * Colors
source panel_colors

# * Functions/Sections

# see "M*" section in panel_bar
songScroll() {
	zscroll -n -u -b "M⮕ x" -d 0.3 -M "mpc status" -m "playing" -b "M⮕ " \
		-s 1 -m "paused" -b "M⮔ " -s 0 "mpc current" > "$PANEL_FIFO" &
}

titleScroll() {
	zscroll -n -d 0.3 -l 80 -b "T| " -a " |" -u "xtitle" > "$PANEL_FIFO" &
}

# ram percent usage
memoryPercent() {
	free | awk '/Mem/ {printf("%d", $3/$2 * 100)}'
}

# cpu temp
# cpuTemp() {
# 	acpi -t | awk '{print $4"°C"}'
# }

# modified from:
# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/panel#L217
batteryPercent() {
	batStatus=$(acpi --battery | awk '{gsub(/,/, ""); print $3}')
	batLevel=$(acpi --battery | awk '{gsub(/[,%]/, ""); print $4}')

	if [[ -z $batStatus ]]; then
		echo "${COLOR_AC}⮃ ⮎ AC"
	elif [[ $batStatus == Charging ]]; then
		echo "${COLOR_CHARGING}⮃ ⮒ $batLevel+"
	elif [[ $batStatus == Discharging ]]; then
		if [[ $batLevel -gt 67 ]]; then
			echo "${COLOR_DISCHARGING}⮃ ⮏ $batLevel-"
		elif [[ $batLevel -gt 33 ]]; then
			echo "${COLOR_DISCHARGING}⮃ ⮑ $batLevel-"
		else
			echo "${COLOR_DISCHARGING}⮃ ⮐ $batLevel-"
		fi
	elif [[ $batStatus == Unknown ]]; then
		echo "${COLOR_FULL_CHARGE}⮃ ⮒ Fully Charged"
	else
		echo "${COLOR_REFRESHING}⮃ Refreshing..."
	fi
}

# modified from:
# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/brightnessScript
brightnessLevel() {
	# cat so || works
	bLevel=$(cat /sys/class/backlight/acpi_video0/actual_brightness 2> /dev/null || \
		cat /sys/class/backlight/intel_backlight/actual_brightness 2> /dev/null)
	maxBLevel=$(cat /sys/class/backlight/acpi_video0/max_brightness 2> /dev/null || \
		cat /sys/class/backlight/intel_backlight/max_brightness 2> /dev/null)
	# floors
	bPercentage=$(awk "BEGIN {printf(\"%d\", $bLevel/$maxBLevel * 10)}")
	case $bPercentage in
		0)  echo "○";;
		1)  echo "•○○○○○○○○○";;
		2)  echo "••○○○○○○○○";;
		3)  echo "•••○○○○○○○";;
		4)  echo "••••○○○○○○";;
		5)  echo "•••••○○○○○";;
		6)  echo "••••••○○○○";;
		7)  echo "•••••••○○○";;
		8)  echo "••••••••○○";;
		9)  echo "•••••••••○";;
		*) echo "•";;
	esac
}

# originally from:
# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/panel#L89
# modified to prefer single awk over cut/grep/tail/sed
# added check for audio output to hdmi
# added truncation when muted or full volume
panelVolume() {
	volStatus=$(amixer get Master | awk 'END { gsub(/[\[\]]/, ""); print $6 }')
	volLevel=$(amixer get Master | awk 'END { gsub(/[%\[\]]/, ""); print $5 }')
	headphone=$(amixer -c 0 contents | grep "Headphone Jack'" -A 2 | awk -F "=" 'NR==3 { print $2 }')
	isHDMI=$(ponymix list --output | grep HDMI)

	if [[ $volStatus == on ]] && [[ $headphone == off ]]; then
		icon="${COLOR_VOLUME}⮃ ⮞"
	elif [[ $volStatus == on ]] && [[ $headphone == on ]];then
		icon="${COLOR_VOLUME}⮃ ⮜"
	elif [[ $volStatus == off ]] && [[ $headphone == on ]]; then
		icon="${COLOR_MUTE}⮃ ⮜"
	elif [[ $volStatus == off ]] && [[ $headphone == off ]]; then
		icon="${COLOR_MUTE}⮃ ⮝"
	else
		# I don't think this ever happens
		icon="$COLOR_MUTE?"
	fi

	# designate if using hdmi connection
	if [[ -n $isHDMI ]];then
		icon="$icon H"
	fi

	# if muted, truncate
	if [[ $volStatus != on ]]; then
		echo "$icon"
	else
		case $volLevel in
			# if full volume truncate
			100) echo "$icon" ;;
			[0-9]) echo "$icon" "$COLOR_VOLUME—$COLOR_VOLUME_BG—————————" ;;
			1*) echo "$icon" "$COLOR_VOLUME——$COLOR_VOLUME_BG————————" ;;
			2*) echo "$icon" "$COLOR_VOLUME———$COLOR_VOLUME_BG———————" ;;
			3*) echo "$icon" "$COLOR_VOLUME————$COLOR_VOLUME_BG——————" ;;
			4*) echo "$icon" "$COLOR_VOLUME—————$COLOR_VOLUME_BG—————" ;;
			5*) echo "$icon" "$COLOR_VOLUME——————$COLOR_VOLUME_BG————" ;;
			6*) echo "$icon" "$COLOR_VOLUME———————$COLOR_VOLUME_BG———" ;;
			7*) echo "$icon" "$COLOR_VOLUME————————$COLOR_VOLUME_BG——" ;;
			8*) echo "$icon" "$COLOR_VOLUME——————————$COLOR_VOLUME_BG—" ;;
			9*) echo "$icon" "$COLOR_VOLUME——————————" ;;
		esac
	fi
}

# originally from:
# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/panel#L236
currentTime() {
	echo "⭧" "$(date +'%a %d %I: %M%P')"
}

mailCount() {
	# unread/total in inbox
	newMessages=$(find ~/.mail/noct/Inbox/new -type f | wc -l)
	curMessages=$(find ~/.mail/noct/Inbox/cur -type f | wc -l)
	totalMessages=$((newMessages+curMessages))
	echo "$newMessages/$totalMessages"
}

# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/panel#L188
# modified to work with more than just connman (for detecting if wired connection)
# modified to detect name of interface
netConnection() {
	# get active interface name
	interface=$(ip link show up | awk -F ": " '/state UP/ {print $2}')
	# wired connection
	if [[ $interface =~ ^e ]]; then
		echo "${COLOR_NET}⮃ W"
	else
		# shows up with wired connection for some connection managers it seems (e.g. networkmanager)
		signalStrength=$(awk 'NR==3 {gsub(/\./, ""); print $3}' /proc/net/wireless)
		# if no connection, print nothing
		if [[ -z $signalStrength ]]; then
			echo ""
		else
			# wireless connection
			if [[ $signalStrength -gt 64 ]]; then
				echo -n "${COLOR_NET}⮃ ‗▬▪▮"
			elif [[ $signalStrength -lt 65 ]] && [[ $signalStrength -gt 39 ]]; then
				echo -n "${COLOR_NET}⮃ ‗▬▪""$COLOR_NET_BG""▮"
			elif [[ "$signalStrength" -lt 40 ]]; then
				echo -n "${COLOR_NET}⮃ ‗▬""$COLOR_NET_BG""▪▮"
			else
				echo -n "$COLOR_NET_BG"" ⮃ ‗▬▪▮ Connecting..."
			fi
			# echo "$COLOR_NET $(iwgetid -r )"
		fi
	fi
}

# * Main
trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[[ -e $PANEL_FIFO ]] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

bspc config top_padding "$PANEL_HEIGHT"
bspc subscribe report > "$PANEL_FIFO" &

# only do the following the first time starting panel:
# scrolling song info (on left)
songScroll
# scrolling win title (middle)
titleScroll
# system info section (right side)
while true; do
	# no < for battery, volume, or connection sections
	# because the < changes color depending on state
	echo "S" "${COLOR_RAM}⮃  $(memoryPercent)% \
$(batteryPercent) \
${COLOR_BRIGHTNESS}⮃ $(brightnessLevel) \
$(panelVolume) \
${COLOR_TIME}⮃ $(currentTime) \
${COLOR_MAIL}⮃  $(mailCount) \
$(netConnection)" > "$PANEL_FIFO"
	sleep 0.1s
done &

# using lemonbar-xft-git
# http://blog.gaijinpot.com/choosing-japanese-font/
# https://wiki.archlinux.org/index.php/Fonts#Japanese
# IPAGothic is more clear than IPAMincho in lemonbar
panel_bar < "$PANEL_FIFO" | lemonbar -a 32 -n the_panel \
	-f "uushi:pixelsize=11" \
	-f "Siji:pixelsize=11" \
	-f "IPAGothic:pixelsize=11:weight=bold" \
	-g x"$PANEL_HEIGHT" -F "$COLOR_FG" -B "$COLOR_BG" | sh &

count=0
while : ; do
	panel_wid=$(xdo id -a the_panel)
	((count++))
	if [[ -n $panel_wid ]]; then
		# prevent bar from being over fullscreen window
		xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$panel_wid"
		break
	elif [[ $count -ge 20 ]]; then
		break
	fi
	sleep 0.5
done

wait

# vim: set ft=sh:
