#!/bin/bash
# base panel script:
# https://github.com/baskerville/bspwm/blob/master/examples/panel/panel

#
# Colours
#

COLOUR_FOREGROUND='#FF34322E'
COLOUR_BACKGROUND='#FF232C31'
# colours from esn's panel
BLUE='%{F#FF5F819D}'
LIGHT_BLUE='%{F#FF81A2BE}'
GREEN='%{F#FF8C9440}'
DARK_GRAY='%{F#FF707880}'
# from old default colours (https://github.com/LemonBoy/bar/blob/3f4ed1600ad1f1bc3a1e838f3c0282ff9b4b1966/config.def.h)
GRAY_BLUE='%{F#FF2D3C46}'
DARK_RED='%{F#FFAC4142}'
LIGHT_GREEN='%{F#FF90A959}'
YELLOW='%{F#FFDE935F}'
GRAY='%{F#FF6C7A80}'
LIGHT_RED='%{F#FFCC6666}'
# other
DARK_BLUE='%{F#FF2A7A9C}'
PURPLE='%{F#FFA84D95}'
DARK_PURPLE='%{F#FF7549D6}'

#
# Functions/Sections
#

# see "M*" section in panel_bar
songScroll() {
	zscroll -n -u -b "M⮕ x" -d 0.2 -M "mpc status" -m "playing" -b "M⮕ " \
		-s 1 -m "paused" -b "M⮔ " -s 0 "mpc current" > "$PANEL_FIFO" &
}

titleScroll() {
	zscroll -n -d 0.3 -l 80 -b "T| " -a " |" -u "xtitle" > "$PANEL_FIFO" &
}

# ram percent usage
memoryPercent() {
	free | awk '/Mem/ {printf("%d", $3/$2 * 100)}'
}

# cpu temp
# cpuTemp() {
# 	acpi -t | awk '{print $4"°C"}'
# }

# modified from:
# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/panel#L217
batteryPercent() {
	colour_ac=$1
	colour_charge=$2
	colour_dcharge=$3
	colour_fcharge=$4
	colour_refresh=$5

	batStatus=$(acpi --battery | awk '{gsub(/,/, ""); print $3}')
	batLevel=$(acpi --battery | awk '{gsub(/[,%]/, ""); print $4}')

	if [[ -z $batStatus ]]; then
		echo "${colour_ac}⮃ ⮎ AC"
	elif [[ $batStatus == Charging ]]; then
		echo "${colour_charge}⮃ ⮒ $batLevel+"
	elif [[ $batStatus == Discharging ]]; then
		echo "${colour_dcharge}⮃ ⮑ $batLevel-"
	elif [[ $batStatus == Unknown ]]; then
		echo "${colour_fcharge}⮃ ⮒ Fully Charged"
	else
		echo "${colour_refresh}⮃ Refreshing..."
	fi
}

# modified from:
# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/brightnessScript
# truncate brightness unless just changed
mkdir -p /tmp/brightness
echo "none" > /tmp/brightness/level
echo "0" > /tmp/brightness/counter
brightnessLevel() {
	currentBLevel=$(< /sys/class/backlight/acpi_video0/actual_brightness)
	# 15 seems to be the normal max?
	# maxBLevel=$(< /sys/class/backlight/acpi_video0/max_brightness)
	lastBLevel=$(< /tmp/brightness/level)

	# reset or possibly update counter
	# how many updates before full brightness meter is no longer displayed after a brightness change
	maxCount=8
	if [[ $currentBLevel -eq $lastBLevel ]]; then
		brightnessCounter=$(< /tmp/brightness/counter)
		if [[ $brightnessCounter -lt $maxCount ]]; then
			((brightnessCounter++))
			echo $brightnessCounter > /tmp/brightness/counter
		fi
	else
		echo 0 > /tmp/brightness/counter
	fi

	# echo based on current brightness level and panel updates since last brightness change
	if [[ $brightnessCounter -ge $maxCount ]]; then
		if [[ $currentBLevel -eq 15 ]]; then
			echo "•"
		elif [[ $currentBLevel -eq 0 ]]; then
			echo "○"
		else
			echo "◉"
		fi
	else
		case $currentBLevel in
			0)  echo "•○○○○○○○○○○○○○○○";;
			1)  echo "••○○○○○○○○○○○○○○";;
			2)  echo "•••○○○○○○○○○○○○○";;
			3)  echo "••••○○○○○○○○○○○○";;
			4)  echo "•••••○○○○○○○○○○○";;
			5)  echo "••••••○○○○○○○○○○";;
			6)  echo "•••••••○○○○○○○○○";;
			7)  echo "••••••••○○○○○○○○";;
			8)  echo "•••••••••○○○○○○○";;
			9)  echo "••••••••••○○○○○○";;
			10) echo "•••••••••••○○○○○";;
			11) echo "••••••••••••○○○○";;
			12) echo "•••••••••••••○○○";;
			13) echo "••••••••••••••○○";;
			14) echo "•••••••••••••••○";;
			15) echo "••••••••••••••••";;
		esac
	fi

	# save current brightness level
	echo "$currentBLevel" > /tmp/brightness/level
}

# originally from:
# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/panel#L89
# modified to prefer single awk over cut/grep/tail/sed
# added check for audio output to hdmi
# added truncation when muted or full volume
panelVolume() {
	colour1=$1
	colour2=$2
	colour3=$3

	volStatus=$(amixer get Master | awk 'END { gsub(/[\[\]]/, ""); print $6 }')
	volLevel=$(amixer get Master | awk 'END { gsub(/[%\[\]]/, ""); print $5 }')
	headphone=$(amixer -c 0 contents | grep "Headphone Jack'" -A 2 | awk -F "=" 'NR==3 { print $2 }')
	isHDMI=$(ponymix list --output | grep HDMI)

	if [[ $volStatus == on ]] && [[ $headphone == off ]]; then
		icon="${colour1}⮃ ⮞"
	elif [[ $volStatus == on ]] && [[ $headphone == on ]];then
		icon="${colour1}⮃ ⮜"
	elif [[ $volStatus == off ]] && [[ $headphone == on ]]; then
		icon="${colour2}⮃ ⮜"
	elif [[ $volStatus == off ]] && [[ $headphone == off ]]; then
		icon="${colour2}⮃ ⮝"
	else
		# I don't think this ever happens
		icon="$colour2?"
	fi

	# designate if using hdmi connection
	if [[ -n $isHDMI ]];then
		icon="$icon H"
	fi

	# if muted, truncate
	if [[ $volStatus != on ]]; then
		echo "$icon"
	else
		case $volLevel in
			# if full volume truncate
			100) echo "$icon" ;;
			[0-9]) echo "$icon" "$colour1—$colour3—————————" ;;
			1*) echo "$icon" "$colour1——$colour3————————" ;;
			2*) echo "$icon" "$colour1———$colour3———————" ;;
			3*) echo "$icon" "$colour1————$colour3——————" ;;
			4*) echo "$icon" "$colour1—————$colour3—————" ;;
			5*) echo "$icon" "$colour1——————$colour3————" ;;
			6*) echo "$icon" "$colour1———————$colour3———" ;;
			7*) echo "$icon" "$colour1————————$colour3——" ;;
			8*) echo "$icon" "$colour1——————————$colour3—" ;;
			9*) echo "$icon" "$colour1——————————" ;;
		esac
	fi
}

# needs sutils: https://github.com/baskerville/sutils
# originally from:
# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/panel#L236
currentTime() {
	echo  "⭧" "$(clock -f '%a %I: %M%P')"
}

mailCount() {
	# unread/total in inbox
	newMessages=$(find ~/.mail/noct/Inbox/new -type f | wc -l)
	curMessages=$(find ~/.mail/noct/Inbox/cur -type f | wc -l)
	totalMessages=$((newMessages+curMessages))
	echo "$newMessages/$totalMessages"
}

# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/panel#L188
# modified to work with more than just connman (for detecting if wired connection)
# modified to detect name of interface
netConnection() {
	colour1=$1
	colour2=$2
	colour3=$3

	# get active interface name
	interface=$(ip link show up | awk -F ": " '/state UP/ {print $2}')
	# wired connection
	if [[ $interface =~ ^e ]]; then
		echo "${colour1}⮃ W"
	else
		# shows up with wired connection for some connection managers it seems (e.g. networkmanager)
		signalStrength=$(awk 'NR==3 {gsub(/\./, ""); print $3}' /proc/net/wireless)
		# if no connection, print nothing
		if [[ -z $signalStrength ]]; then
			echo ""
		else
			# wireless connection
			if [[ $signalStrength -gt 64 ]]; then
				echo -n "${colour1}⮃ ‗▬▪▮"
			elif [[ $signalStrength -lt 65 ]] && [[ $signalStrength -gt 39 ]]; then
				echo -n "${colour1}⮃ ‗▬▪""$colour2""▮""$colour3"
			elif [[ "$signalStrength" -lt 40 ]]; then
				echo -n "${colour1}⮃ ‗▬""$colour2""▪▮""$colour3"
			else
				echo -n "$colour2"" ⮃ ‗▬▪▮ Connecting..."
			fi
			echo " $(essid -w "$interface")"
		fi
	fi
}

#
# Main
#

if [[ $(pgrep -cx panel) -gt 1 ]]; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[[ -e $PANEL_FIFO ]] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

bspc config top_padding "$PANEL_HEIGHT"
bspc control --subscribe > "$PANEL_FIFO" &

# only do the following the first time starting panel:
# scrolling song info (on left)
songScroll
# scrolling win title (middle)
titleScroll
# system info section (right side)
while true; do
	# no < for battery, volume, or connection sectiosn because the < changes colour depending on state
	echo "S""${DARK_PURPLE}⮃ ¤ $(memoryPercent)% \
$(batteryPercent $GRAY $LIGHT_RED $DARK_RED $GREEN $LIGHT_GREEN) \
${YELLOW}⮃ $(brightnessLevel) \
$(panelVolume $DARK_BLUE $DARK_RED $GRAY_BLUE) \
${PURPLE}⮃ $(currentTime) \
${GRAY}⮃  $(mailCount) \
$(netConnection $LIGHT_BLUE $DARK_GRAY $BLUE)" > "$PANEL_FIFO"
	sleep 0.1s
done &

# using lemonbar-xft-git
# http://blog.gaijinpot.com/choosing-japanese-font/
# https://wiki.archlinux.org/index.php/Fonts#Japanese
# IPAGothic is more clear than IPAMincho in lemonbar
panel_bar < "$PANEL_FIFO" | lemonbar \
	-f "uushi:pixelsize=11" \
	-f "Stlarch:pizelsize=10" \
	-f "IPAGothic:pixelsize=11:weight=bold" \
	x"$PANEL_HEIGHT" -F "$COLOUR_FOREGROUND" -B "$COLOUR_BACKGROUND" &

wait
# because vim is dumber than emacs:
# vim: set ft=sh:
