#!/bin/sh
# base panel script:
# https://github.com/baskerville/bspwm/blob/master/examples/panel/panel
# some functions from here: (put link in before if so and listed changes)
# https://github.com/esn89/dotfiles/blob/master/bspwm/.barScripts/panel

if [ $(pgrep -cx panel) -gt 1 ] ; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

PANEL_HEIGHT=14
bspc config top_padding $PANEL_HEIGHT

bspc control --subscribe > "$PANEL_FIFO" &

# colors from esn's panel
LIGHTBLUE="%{F#FF81A2BE}"
DARKGREY="%{F#FF707880}"
green="%{F#FF8C9440}"
# add alpha channel; no opacity
COLOR_FOREGROUND='#FF34322E'
COLOR_BACKGROUND='#FF232C31'
# old default colours
gray_blue='%{F#FF2D3C46}'
dark_red='%{F#FFAC4142}'
light_green='%{F#FF90A959}'
C_3='#FFDE935F'
C_4='#FF6A9FB5'
C_5='#FFAA759F'
gray='%{F#FF6C7A80}'
light_red='%{F#FFCC6666}'

dark_blue='%{F#FF2A7A9C}'
# bright_pink='#FFFF78FF'
bright_pink='#FFE300E3'
better_purple='#FFA84D95'
# other='%{F#FF7A52D1}'
other='%{F#FF7549D6}'
lighter_orange='#FFF2AB4E'

MUSIC_SCROLLER=""
LAST_MPC_DISPLAY=""
LAST_MPC_STATE=""
# based off:
# https://github.com/benghaem/dotfiles/blob/1dcbee5ed235a8e319dcc4255df10f0a6b23b6fe/bin/panel/panel#L80
# unlike the other functions, this actually sends stuff to the fifo on its own
# see "M*" section in panel_bar
songScroll() {
	mpc_state=$(mpc status | awk 'NR==2 {print $1}')
	mpc_song=$(mpc current)

	# kill old zscroll so not scrolling over new text
	if [[ $mpc_song != "$LAST_MPC_SONG" ]] || [[ $mpc_state != "$LAST_MPC_STATE" ]]; then
		if [[ -n $MUSIC_SCROLLER ]]; then
			kill $MUSIC_SCROLLER
			MUSIC_SCROLLER=""
		fi
	fi

	if [[ -n $mpc_song ]]; then
		# if going to be scrolled, add " - " separator
		if [[ ${#mpc_song} -gt 40 ]]; then
			mpc_display="$mpc_song - "
		else
			mpc_display=$mpc_song
		fi

		if [[ $mpc_state == "[paused]" ]]; then
			# don't scroll if paused
			echo "M⮔" "${mpc_song:0:40}" > "$PANEL_FIFO"
		else
			# update scroller on song change or state change (e.g. paused to unpaused)
			if [[ $mpc_song != "$LAST_MPC_SONG" ]] || [[ $mpc_state != "$LAST_MPC_STATE" ]]; then
				# will only scroll if greater than 40, otherwise will just print in place
				zscroll -n -b "M⮕ " "$mpc_display" > "$PANEL_FIFO" &
				MUSIC_SCROLLER=$!
			fi
		fi
	else
		# nothing playing/paused
		echo "M⮕ x" > "$PANEL_FIFO"
	fi
	# save
	LAST_MPC_SONG=$mpc_song
	LAST_MPC_STATE=$mpc_state
}

TITLE_SCROLLER=""
LAST_TITLE_DISPLAY=""
# different from above: not using zscroll for fixed text:
# window title changes a lot; seems a bit excessive to a start/kill a zscroll process each time
titleScroll(){
	title_display=$(xtitle)
	if [[ $title_display != "$LAST_TITLE_DISPLAY" ]]; then
		# prevent old scroller from messing with new text
		if [[ -n $TITLE_SCROLLER ]]; then
			kill $TITLE_SCROLLER
			TITLE_SCROLLER=""
		fi

		if [[ ${#title_display} -gt 80 ]]; then
			zscroll -n -l 80 -b "T| " -a " |" "$title_display - " > "$PANEL_FIFO" &
			TITLE_SCROLLER=$!
		else
			echo "T| $title_display |" > "$PANEL_FIFO"
		fi

		LAST_TITLE_DISPLAY=$title_display
	fi
}

# add ram percent
mempercent() {
	free | awk '/Mem/ {printf("%d", $3/$2 * 100)}'
}

# modified from:
# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/panel#L217
panelBattery() {
	color_ac=$1
	color_charge=$2
	color_dcharge=$3
	color_fcharge=$4
	color_refresh=$5

	batStatus=$(acpi --battery | awk '{gsub(/,/, ""); print $3}')
	batLevel=$(acpi --battery | awk '{gsub(/[,%]/, ""); print $4}')

	if [[ -z $batStatus ]]; then
		echo "${color_ac}⮃ ⮎ AC"
	elif [[ $batStatus == Charging ]]; then
		echo "${color_charge}⮃ ⮒ $batLevel+"
	elif [[ $batStatus == Discharging ]]; then
		echo "${color_dcharge}⮃ ⮑ $batLevel-"
	elif [[ $batStatus == Unknown ]]; then
		echo "${color_fcharge}⮃ ⮒ Fully Charged"
	else
		echo "${color_refresh}⮃ Refreshing..."
	fi
}

# modified from:
# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/brightnessScript
# truncate brightness unless just changed
mkdir -p /tmp/brightness
echo "none" > /tmp/brightness/level
echo "0" > /tmp/brightness/counter
panelBrightness() {
	currentBLevel=$(< /sys/class/backlight/acpi_video0/actual_brightness)
	# 15 seems to be the normal max?
	# maxBLevel=$(< /sys/class/backlight/acpi_video0/max_brightness)
	lastBLevel=$(< /tmp/brightness/level)

	# reset or possibly update counter
	# how many updates before full brightness meter is no longer displayed after a brightness change
	maxCount=8
	if [[ $currentBLevel -eq $lastBLevel ]]; then
		brightnessCounter=$(< /tmp/brightness/counter)
		if [[ $brightnessCounter -lt $maxCount ]]; then
			((brightnessCounter++))
			echo $brightnessCounter > /tmp/brightness/counter
		fi
	else
		echo 0 > /tmp/brightness/counter
	fi

	# echo based on current brightness level and panel updates since last brightness change
	if [[ $brightnessCounter -ge $maxCount ]]; then
		if [[ $currentBLevel -eq 15 ]]; then
			echo "•"
		elif [[ $currentBLevel -eq 0 ]]; then
			echo "○"
		else
			echo "◉"
		fi
	else
		case $currentBLevel in
			0)  echo "•○○○○○○○○○○○○○○○";;
			1)  echo "••○○○○○○○○○○○○○○";;
			2)  echo "•••○○○○○○○○○○○○○";;
			3)  echo "••••○○○○○○○○○○○○";;
			4)  echo "•••••○○○○○○○○○○○";;
			5)  echo "••••••○○○○○○○○○○";;
			6)  echo "•••••••○○○○○○○○○";;
			7)  echo "••••••••○○○○○○○○";;
			8)  echo "•••••••••○○○○○○○";;
			9)  echo "••••••••••○○○○○○";;
			10) echo "•••••••••••○○○○○";;
			11) echo "••••••••••••○○○○";;
			12) echo "•••••••••••••○○○";;
			13) echo "••••••••••••••○○";;
			14) echo "•••••••••••••••○";;
			15) echo "••••••••••••••••";;
		esac
	fi

	# save current brightness level
	echo "$currentBLevel" > /tmp/brightness/level
}

# originally from:
# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/panel#L89
# modified to prefer single awk over cut/grep/tail/sed
# added check for audio output to hdmi
# added truncation when muted or full volume
panelVolume() {
	color1=$1
	color2=$2
	color3=$3

	volStatus=$(amixer get Master | awk 'END { gsub(/[\[\]]/, ""); print $6 }')
	volLevel=$(amixer get Master | awk 'END { gsub(/[%\[\]]/, ""); print $5 }')
	headphone=$(amixer -c 0 contents | grep "Headphone Jack'" -A 2 | awk -F "=" 'NR==3 { print $2 }')
	isHDMI=$(ponymix list --output | grep HDMI)

	if [[ $volStatus == on ]] && [[ $headphone == off ]]; then
		icon="$color1⮞"
	elif [[ $volStatus == on ]] && [[ $headphone == on ]];then
		icon="$color1⮜"
	elif [[ $volStatus == off ]] && [[ $headphone == on ]]; then
		icon="$color2⮜"
	elif [[ $volStatus == off ]] && [[ $headphone == off ]]; then
		icon="$color2⮝"
	else
		# I don't think this ever happens
		icon="$color2?"
	fi

	# designate if using hdmi connection
	if [[ -n $isHDMI ]];then
		icon="$icon H"
	fi

	# if muted, truncate
	if [[ $volStatus != on ]]; then
		echo "$icon"
	else
		case $volLevel in
			# if full volume truncate
			100) echo "$icon" ;;
			[0-9]) echo "$icon" "$color1—$color3—————————" ;;
			1*) echo "$icon" "$color1——$color3————————" ;;
			2*) echo "$icon" "$color1———$color3———————" ;;
			3*) echo "$icon" "$color1————$color3——————" ;;
			4*) echo "$icon" "$color1—————$color3—————" ;;
			5*) echo "$icon" "$color1——————$color3————" ;;
			6*) echo "$icon" "$color1———————$color3———" ;;
			7*) echo "$icon" "$color1————————$color3——" ;;
			8*) echo "$icon" "$color1——————————$color3—" ;;
			9*) echo "$icon" "$color1——————————" ;;
		esac
	fi
}

# needs sutils
# https://github.com/baskerville/sutils
# https://github.com/esn89/dotfiles/blob/master/bspwm/.barScripts/panel
panel_clock() {
	echo  "⭧" $(clock -f '%a %d %I: %M%P')
}

mail_count() {
	# unread/just in inbox
	# echo "$(find ~/.mail/school/Inbox/new -type f | wc -l)/$(find ~/.mail/school/Inbox/cur -type f | wc -l) |"
	echo "$(find ~/.mail/nocturnalartifice/Inbox/new -type f | wc -l)/$(find ~/.mail/nocturnalartifice/Inbox/cur -type f | wc -l)"
}

# https://github.com/esn89/dotfiles/blob/40589c82a9471dde984f52c96126db02afe8987b/bspwm/.barScripts/panel#L188
# modified to work with more than just connman (for detecting if wred connection)
# modified to detect name of interface
panelNetConnection() {
	color1=$1
	color2=$2
	color3=$3

	# get active interface name
	interface=$(ip route get 8.8.8.8 | awk '{print $5;exit}')
	# can parse ifconfig or ip link if need every interface name
	# wlan_device=$(ifconfig | awk -F ":" '/^wl/ {print $1}')

	# wired connection
	if [[ $interface =~ ^e ]]; then
		echo "$color1" " ⮃ W"
	else
		# shows up with wired connection for some connection managers it seems (e.g. networkmanager)
		signalStrength=$(awk 'NR==3 {gsub(/\./, ""); print $3}' /proc/net/wireless)
		# if no connection, print nothing
		if [[ -z $signalStrength ]]; then
			echo ""
		else
			# wireless connection
			if [[ $signalStrength -gt 64 ]]; then
				echo "$color1"" ⮃ ‗▬▪▮"
			elif [[ $signalStrength -lt 65 ]] && [[ $signalStrength -gt 39 ]]; then
				echo "$color1"" ⮃ ‗▬▪""$color2""▮""$color3"
			elif [[ "$signalStrength" -lt 40 ]]; then
				echo "$color1"" ⮃ ‗▬""$color2""▪▮""$color3"
			else
				echo "$color2"" ⮃ ‗▬▪▮ Connecting..."
			fi
			echo " $(essid -w "$interface")"
		fi
	fi
}

while true; do
	songScroll
	titleScroll
	echo "S" ""$other⮃ ¤ $(mempercent)%% $dark_red $(panelBattery $gray $light_red $dark_red $green $light_green)  %{F$C_3}⮃ $(panelBrightness) $dark_blue⮃ $(panelVolume $dark_blue $dark_red $gray_blue) "%{F$better_purple}⮃ "$(panel_clock) %{F$C_7}⮃  $(mail_count)$(panelNetConnection "$LIGHTBLUE" "$DARKGRAY" "$BLUE") > "$PANEL_FIFO"
	sleep 0.1s

done &

		cat "$PANEL_FIFO" | panel_bar | bar-aint-recursive -f "*-stlarch-medium-r-*-*-10-*-*-*-*-*-*-*,-benis-uushi-medium-r-normal--11-90-75-75-p-58-iso10646-1" x$PANEL_HEIGHT -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" &

wait
