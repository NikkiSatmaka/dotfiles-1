#!/bin/sh
# base panel script:
# https://github.com/baskerville/bspwm/blob/master/examples/panel/panel
# some functions from here: (put link in before if so and listed changes)
# https://github.com/esn89/dotfiles/blob/master/bspwm/.barScripts/panel

if [ $(pgrep -cx panel) -gt 1 ] ; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

flavor=${1:-bar}

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

PANEL_HEIGHT=14
bspc config top_padding $PANEL_HEIGHT

bspc control --subscribe > "$PANEL_FIFO" &

# colors from esn's panel
LIGHTBLUE="%{F#FF81A2BE}"
DARKGREY="%{F#FF707880}"
# add alpha channel; no opacity
COLOR_FOREGROUND='#FF34322E'
COLOR_BACKGROUND='#FF232C31'
# old default colours
C_0='#FF2D3C46'
C_1='#FFAC4142'
C_2='#FF90A959'
C_3='#FFDE935F'
C_4='#FF6A9FB5'
C_5='#FFAA759F'
C_7='#FF6C7A80'
C_9='#FFCC6666'

C_Z='#FF2A7A9C'
# bright_pink='#FFFF78FF'
bright_pink='#FFE300E3'
better_purple='#FFA84D95'
# other='%{F#FF7A52D1}'
other='%{F#FF7549D6}'
lighter_orange='#FFF2AB4E'

PID="first"
last_mpc_display="none"
# based off:
# https://github.com/benghaem/dotfiles/blob/master/bin/panel/panel
fixedSong() {
	# remove last 3 characters (the " - "), then make sure not longer than 40
	mpc_display=$(echo "$mpc_display" | rev | cut -c 4- | rev | cut -c 1-40)
	PID="none"
	last_mpc_display=$mpc_display
	if [ "$1" == "paused" ]; then
		echo "M ⮔" $mpc_display > "$PANEL_FIFO"
	else
		echo "M" $mpc_display > "$PANEL_FIFO"
	fi
}

songScroll(){
	mpc_info=$(mpc -f '%artist% - %title% - ')
	mpc_display=$(echo "$mpc_info" | head -n 1)
	is_paused=$(echo $mpc_info | grep paused)
	if [ "$(mpc current)" == "" ]; then
		mpc_display=""	
	fi
	if [ "$is_paused" != "" ]; then
		if ([[ $PID != "first" ]] && [[ $PID != "none" ]]); then
			kill $PID
			PID="none"
		fi
		fixedSong paused
	fi
	if [ "$mpc_display" != "$last_mpc_display" ]; then
		if [ "$PID" != "first" ] && [ "$PID" != "none" ]; then
			kill $PID
			PID="none"
		fi
		if [ ${#mpc_display} -gt 40 ]; then
			# echo $mpc_display
			$HOME/.config/bspwm/panel/scroller "$mpc_display" "40" "M ⮕ " "" > "$PANEL_FIFO" &
			PID=$!
		else
			fixedSong
		fi
		last_mpc_display=$mpc_display
		#echo $PID
	fi
}

PIDX="first"
last_title_display="none"
# based off:
# https://github.com/benghaem/dotfiles/blob/master/bin/panel/panel
fixedTitle() {
	# remove " - " and display first 80 chars
	title_display=$(echo "$title_display" | rev | cut -c 4- | rev | cut -c 1-80)
	if [ "$title_display" == "" ]; then
		echo "T| empty |" > "$PANEL_FIFO"
	else
		echo "T|" $title_display "|" > "$PANEL_FIFO"
	fi
	PIDX="none"
	last_title_display=$title_display
}

titleScroll(){
	title_display=$(xtitle -f '%s - ')
	if [ "$title_display" != "$last_title_display" ]; then
		if [ "$PIDX" != "first" ] && [ "$PIDX" != "none" ]; then
			kill $PIDX
			PIDX="none"
		fi
		if [ ${#title_display} -gt 80 ]; then
			$HOME/.config/bspwm/panel/scroller "$title_display" "80" "T| " "" > "$PANEL_FIFO" &
			PIDX=$!
		else
			fixedTitle
		fi
		last_title_display=$title_display
	fi
}

# add ram percent
memused() {
	free | awk '/buffers\/cache/ {print $3}'
}

memtotal() {
	free | awk '/Mem/ {print $2}'
}

mempercent() { 
	echo "$(($(memused)*100/$(memtotal)))"
}

# https://github.com/esn89/dotfiles/blob/master/bspwm/.barScripts/panel
panel_battery() {
	# replaced cut and sed with only awk
	batStats=$(acpi --battery | awk '{ gsub(/,/, ""); print $3 }')
	batLevel=$(acpi --battery | awk '{ gsub(/[,%]/, ""); print $4 }')
	if [ "$batStats" == "" ]; then
		echo "%{F$C_7}⮃ ⮎ AC"
	elif [ "$batStats" == "Charging" ]; then
		echo "%{F$C_9}⮃ ⮒" $batLevel"+"
	elif [ "$batStats" == "Discharging" ]; then
		echo "%{F$C_1}⮃ ⮑" $batLevel"-"
	elif [ "$batStats" == "Unknown" ]; then
		# echo $GREEN"⮃ ⮒ Fully Charged"
		echo ""
	else
		echo "%{F$C_2}⮃ Refreshing..."
	fi

}

# modified from: https://github.com/esn89/dotfiles/blob/master/bspwm/.barScripts/
# this is a really convoluted way of truncating the brightness if it hasn't just been changed
# since echoed > into $PANEL_FIFO, can't use variables for storing last brightness state; would have to split system info (since brightness in middle.. or move it) and echo into PANEL_FIFO from within panel_brightness
echo "none" > ~/.config/bspwm/panel/brightness.txt
echo "0" > ~/.config/bspwm/panel/brightness_count.txt
panel_brightness() {
	cd ~/.config/bspwm/panel
	brightnessLevel=$(cat /sys/class/backlight/acpi_video0/actual_brightness)
	# maxBrightness=$(cat /sys/class/backlight/acpi_video0/max_brightness)
	lastBrightness=$(cat brightness.txt)

if [ "$brightnessLevel" == "$lastBrightness" ]; then
	brightnessCount=$(cat brightness_count.txt)
	if [ $brightnessCount -lt 5 ]; then
		((brightnessCount++))
		echo $brightnessCount > brightness_count.txt
	fi
	justChanged=false
else
	justChanged=true
	echo "0" > brightness_count.txt
fi

if [ "$brightnessCount" == "" ]; then
	brightnessCount=0
fi
if [ $brightnessCount -gt 4 ]; then
	if [ "$brightnessLevel" == 15 ]; then
		echo "•"
	elif [ "$brightnessLevel" == 0 ]; then
		echo "○"
	else
		echo "◉"
	fi
else
	case $brightnessLevel in
		0)  echo "•○○○○○○○○○○○○○○○";;
		1)  echo "••○○○○○○○○○○○○○○";;
		2)  echo "•••○○○○○○○○○○○○○";;
		3)  echo "••••○○○○○○○○○○○○";;
		4)  echo "•••••○○○○○○○○○○○";;
		5)  echo "••••••○○○○○○○○○○";;
		6)  echo "•••••••○○○○○○○○○";;
		7)  echo "••••••••○○○○○○○○";;
		8)  echo "•••••••••○○○○○○○";;
		9)  echo "••••••••••○○○○○○";;
		10) echo "•••••••••••○○○○○";;
		11) echo "••••••••••••○○○○";;
		12) echo "•••••••••••••○○○";;
		13) echo "••••••••••••••○○";;
		14) echo "•••••••••••••••○";;
		15) echo "••••••••••••••••";;
	esac
fi
	echo $brightnessLevel > brightness.txt
}

# https://github.com/esn89/dotfiles/blob/master/bspwm/.barScripts/panel
# added check for outputting audio to hdmi
panel_volume() {
	# changed to use awk instead of tail, cut, and sed
	volStatus=$(amixer get Master | awk 'END { gsub(/[\[\]]/, ""); print $6 }')
	volLevel=$(amixer get Master | awk 'END { gsub(/[%\[\]]/, ""); print $5 }')
	# got rid of extra cut; grep for headphone jack, not a number
	headphone=$(amixer -c 0 contents | grep "Headphone Jack'" -A 2 | awk -F "=" 'NR==3 { print $2 }')
	isHDMI=$(ponymix list --output | grep HDMI)

	if [ "$volStatus" == "on" ] && [ "$headphone" == "off" ]; then
		icon="%{F$C_Z}⮞"
	elif [ "$volStatus" == "on" ] && [ "$headphone" == "on" ];then
		icon="%{F$C_Z}⮜"
	elif [ "$volStatus" == "off" ] && [ "$headphone" == "on" ]; then
		icon="%{F$C_1}⮜"
	elif [ "$volStatus" == "off" ] && [ "$headphone" == "off" ]; then
		icon="%{F$C_1}⮝"
	else
		icon="%{F$C_1} "
	fi

	if [ "$isHDMI" ];then
		icon="$icon H"
	fi

	case $volLevel in
		100) if [ "$volStatus" == "on" ]; then 
				# echo "$icon" "%{F$C_Z}——————————"
				echo "$icon"
			else
				# echo "$icon" "%{F$C_5}——————————"
				echo "$icon"
			fi
			;;
		[0-9]) if [ "$volStatus" == "on" ]; then 
				echo "$icon" "%{F$C_Z}—%{F$C_0}—————————"
			else
				# echo "$icon" "%{F$C_5}—%{F$C_0}—————————"
				echo "$icon"
			fi
			;;
		1*) if [ "$volStatus" == "on" ]; then
				echo "$icon" "%{F$C_Z}——%{F$C_0}————————"
			else
				# echo "$icon" "%{F$C_5}——%{F$C_0}————————"
				echo "$icon"
			fi
			;;
		2*) if [ "$volStatus" == "on" ]; then
				echo "$icon" "%{F$C_Z}———%{F$C_0}———————"
			else
				# echo "$icon" "%{F$C_5}———%{F$C_0}———————"
				echo "$icon"
			fi
			;;
		3*) if [ "$volStatus" == "on" ]; then
				echo "$icon" "%{F$C_Z}————%{F$C_0}——————"
			else
				# echo "$icon" "%{F$C_5}————%{F$C_0}——————"
				echo "$icon"
			fi
			;;
		4*) if [ "$volStatus" == "on" ]; then
				echo "$icon" "%{F$C_Z}—————%{F$C_0}—————"
			else
				# echo "$icon" "%{F$C_5}—————%{F$C_0}—————"
				echo "$icon"
			fi
			;;
		5*) if [ "$volStatus" == "on" ]; then
				echo "$icon" "%{F$C_Z}——————%{F$C_0}————"
			else
				# echo "$icon" "%{F$C_5}——————%{F$C_0}————"
				echo "$icon"
			fi
			;;
		6*) if [ "$volStatus" == "on" ]; then
				echo "$icon" "%{F$C_Z}———————%{F$C_0}———"
			else
				# echo "$icon" "%{F$C_5}———————%{F$C_0}———"
				echo "$icon"
			fi
			;;
		7*) if [ "$volStatus" == "on" ]; then
				echo "$icon" "%{F$C_Z}————————%{F$C_0}——"
			else
				# echo "$icon" "%{F$C_5}————————%{F$C_0}——"
				echo "$icon"
			fi
			;;
		8*) if [ "$volStatus" == "on" ]; then
				echo "$icon" "%{F$C_Z}——————————%{F$C_0}—"
			else
				# echo "$icon" "%{F$C_5}——————————%{F$C_0}—"
				echo "$icon"
			fi
			;;
		9*) if [ "$volStatus" == "on" ]; then
				echo "$icon" "%{F$C_Z}——————————"
			else
				# echo "$icon" "%{F$C_5}——————————"
				echo "$icon"
			fi
			;;
	esac
}

# needs sutils
# https://github.com/baskerville/sutils
# https://github.com/esn89/dotfiles/blob/master/bspwm/.barScripts/panel
panel_clock() {
	echo  "⭧" $(clock -f '%a %d %I: %M%P')
}

mail_count() {
	# unread/just in inbox
	# echo "$(find ~/.mail/school/Inbox/new -type f | wc -l)/$(find ~/.mail/school/Inbox/cur -type f | wc -l) |"
	echo "$(find ~/.mail/nocturnalartifice/Inbox/new -type f | wc -l)/$(find ~/.mail/nocturnalartifice/Inbox/cur -type f | wc -l)"
}

# https://github.com/esn89/dotfiles/blob/master/bspwm/.barScripts/panel
# changed so will detect name of wireless device
panel_essid() {
	wlan_device=$(ifconfig | awk -F ":" '/^wl/ {print $1}')
	echo $(panel_sigStrength) $(essid -w $wlan_device)
}

# https://github.com/esn89/dotfiles/blob/master/bspwm/.barScripts/panel
# works with connman
panel_sigStrength() {
	# use just awk, no sed
	signalStrength=$(cat /proc/net/wireless | awk 'NR==3 { gsub(/\./, ""); print $3}')
	isEthernet=$(connmanctl technologies | awk '/Connected/ { print $NF }')
	final=$(echo $isEthernet | awk '{print $1}')

	if [ "$final" == "True" ]; then
		echo $LIGHTBLUE "⮃ W"
	# if no connection, prevent annoying errors
	elif [ "$signalStrength" == "" ]; then
		echo $LIGHTBLUE ""
	elif [ "$signalStrength" -gt 64 ]; then
		echo $LIGHTBLUE "⮃ ‗▬▪▮"
	elif [ "$signalStrength" -lt 65 ] && [ "$signalStrength" -gt 39 ]; then
		echo $LIGHTBLUE "⮃ ‗▬▪"$DARKGREY"▮"$BLUE
	elif [ "$signalStrength" -lt 40 ]; then
		echo $LIGHTBLUE "⮃ ‗▬"$DARKGREY"▪▮"$BLUE
	else
		echo $DARKGREY "⮃ ‗▬▪▮ Connecting..."
	fi
}

while true; do
	songScroll
	titleScroll
	echo "S" ""$other⮃ ¤ $(mempercent)%% $(panel_battery)  %{F$C_3}⮃ $(panel_brightness) %{F$C_Z}⮃ $(panel_volume) "%{F$better_purple}⮃ "$(panel_clock) %{F$C_7}⮃  $(mail_count)$LIGHTBLUE$(panel_essid) > "$PANEL_FIFO"
	sleep 0.1s

done &

case "$flavor" in
	bar)
		# change to bar-aint-recursive since using git version
		# -b to put at bottom
		# use o
		cat "$PANEL_FIFO" | panel_bar | bar-aint-recursive -f "*-stlarch-medium-r-*-*-10-*-*-*-*-*-*-*,-benis-uushi-medium-r-normal--11-90-75-75-p-58-iso10646-1" x$PANEL_HEIGHT -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" &
		;;
	dzen2)
		FONT_FAMILY='DejaVu Sans'
		FONT_SIZE=11
		cat "$PANEL_FIFO" | panel_dzen2 -f "$FONT_FAMILY" -s "$FONT_SIZE" | dzen2 -h $PANEL_HEIGHT -dock -ta l -title-name panel -fn "${FONT_FAMILY}:pixelsize=${FONT_SIZE}" -fg "$COLOR_FOREGROUND" -bg "$COLOR_BACKGROUND" &
		;;
esac

wait
