#!/usr/bin/env -S bb -cp ${HOME}/bin

(ns wm.hlwm_layout_icon
  "Herbstluftwm script to continuously print an icon when the layout changes."
  (:require
   [babashka.process :refer [sh]]
   [bb.util :refer [cmd-reader sh-out]]
   [clojure.string :refer [split]]))

(def layout-icons
  "Map of layouts to Siji icons."
  {"horizontal" ""
   "vertical"   ""
   "max"        ""})

(defn print-layout
  "Print an icon for the given herbstluftwm layout."
  [layout window-count]
  (print (or (layout-icons layout) ""))
  (println window-count))

(defmacro print-and-recur
  "Helper for -main to print the current herbstluftwm layout than recur."
  [layout window-count]
  `(do
     (print-layout ~layout ~window-count)
     (recur ~layout ~window-count (split (read-line) #"\t"))))

(defn -main
  "Print an icon for the current herbstluftwm layout whenever it changes."
  []
  (let [layout-attr "tags.focus.tiling.focused_frame.algorithm"
        count-attr  "tags.focus.client_count"
        layout      (sh-out ["herbstclient" "attr" layout-attr])
        count       (sh-out ["herbstclient" "attr" count-attr])]
    (print-layout layout count)
    (sh ["herbstclient" "watch" layout-attr])
    (sh ["herbstclient" "watch" count-attr])
    (with-open [rdr (cmd-reader
                     ["herbstclient"
                      "--idle"
                      "attribute_changed"])]
      (binding [*in* rdr]
        (loop [layout         layout
               count          count
               [_ attr _ new] (split (read-line) #"\t")]
          (cond (= attr layout-attr)
                (print-and-recur new count)
                (= attr count-attr)
                (print-and-recur layout new)
                :else
                (recur layout count (split (read-line) #"\t"))))))))

(when (= *file* (System/getProperty "babashka.file"))
  (-main))
