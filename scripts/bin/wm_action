#!/bin/bash
# for bspwm and maybe eventually herbstluftwm, i3, etc.
# so can setup bindings in one place for different programs and WMs

wm=$(< /tmp/window_manager)
if [[ -z $wm ]]; then
	wm=$(xprop -notype -id "$(xprop -root -notype | awk '$1=="_NET_SUPPORTING_WM_CHECK:"{print $5}')" -f _NET_WM_NAME 8u | awk -F "\"" '/WM_NAME/ {print $2}' | head -n 1)
	echo "$wm" > /tmp/window_manager
fi

bspc_action() {
case $1 in
	dsel)
		if [[ $2 =~ ^[0-9]$ ]]; then
			bspc desktop -f ^"$2"
		else
			bspc desktop -f "$2"
		fi
		;;
	dcycle)
		bspc desktop -C "$2"
		;;
	drotate)
		if [[ $2 == backward ]]; then
			bspc desktop -R 270
		elif [[ $2 == forward ]]; then
			bspc desktop -R 90
		fi
		;;
	dbalance)
		bspc desktop -B
		;;
	wsel)
		# so can change windows w/ same keys even in monocle (e.g. like a tabbed layout)
		if [[ $2 ==  left ]] || [[ $2 == down ]]; then
			if bspc control --get-status | grep -q "LT"; then
				bspc window -f "$2"
			else
				bspc window -f prev
			fi
		elif [[ $2 == up ]] || [[ $2 == right ]]; then
			if bspc control --get-status | grep -q "LT"; then
				bspc window -f "$2"
			else
				bspc window -f next
			fi
		else
			bspc window -f "$2"
		fi
		;;
	wmove)
		bspc window -s "$2"
		;;
	wmove_tod)
		bspc window -d ^"$2"
		;;
	wresize)
		if [[ $2 == left ]]; then
			bspc window --edge right -40 || bspc window --edge left -40
		elif  [[ $2 == down ]]; then
			bspc window --edge up +30 || bspc window --edge down +30
		elif  [[ $2 == up ]]; then
			bspc window --edge up -30 || bspc window --edge down -30
		elif  [[ $2 == right ]]; then
			bspc window --edge right +40 || bspc window --edge left +40
		fi
		;;
	w_toggle)
		bspc window -t "$2"
		;;
	w_close)
		bspc window -c
		;;
	w_kill)
		bspc window -k
		;;
	lsel)
		bspc desktop -l "$2"
		;;
	psel)
		if [[ $2 == canceld ]]; then
			bspc desktop -c
		else
			bspc window -p "$2"
		fi
		;;
	gapc)
		bspc config -d focused window_gap $(($(bspc config -d focused window_gap) + $2 ))
		;;
	splitr)
		bspc window -r "$2"
		;;
	hide_all)
		bspc control --toggle-visibility
		;;
	reload)
		bspc query -T > "$BSPWM_TREE"; bspc query -H > "$BSPWM_HISTORY"; bspc quit && pkill panel
		;;
	quit)
		 bspc quit 1
		 ;;
	*)
		echo "not a valid action"
		exit 1
esac
}

tmux_action() {
case $1 in
	# wm desktop is equivalent to tmux window
	dsel)
		if [[ $2 == last ]]; then
			tmux select-window -l
		else
			tmux select-window -t "$2"
		fi
		;;
	dbalance)
		tmux select-layout even-vertical
		;;
	# pane selection
	wsel)
		if [[ $2 == left ]]; then
			tmux select-pane -L
		elif [[ $2 == down ]]; then
			tmux select-pane -D
		elif [[ $2 == up ]]; then
			tmux select-pane -U
		elif [[ $2 == right ]]; then
			tmux select-pane -R
		elif [[ $2 == last ]]; then
			tmux select-pane -l
		fi
		;;
	wmove)
		if [[ $2 == prev ]]; then
			tmux swap-pane -U
		elif [[ $2 == next ]]; then
			tmux swap-pane -D
		fi
		;;
	wresize)
		if [[ $2 == left ]]; then
			tmux resize-pane -L 5
		elif  [[ $2 == down ]]; then
			tmux resize-pane -D 3
		elif  [[ $2 == up ]]; then
			tmux resize-pane -U 3
		elif  [[ $2 == right ]]; then
			tmux resize-pane -R 5
		fi
		;;
	wcreate)
		tmux new-window
		;;
	split_top)
		tmux split-window -h
		;;
	split_left)
		tmux split-window
		;;
	p_close)
		tmux kill-pane
		;;
	break)
		tmux break-pane
		;;
	lsel)
		# 'monocle'
		if [[ $2 == next ]]; then
			tmux resize-pane -Z
		else
			tmux select-layout "$2"
		fi
		;;
	*)
		echo "not a valid action"
		exit 1
esac
}
fi

# vim: set ft=sh:
