#!/bin/bash
# for bspwm and maybe eventually herbstluftwm, i3, etc.
# so can setup bindings in one place for different programs and WMs

#
# Wm Detection
#

wm=$(< /tmp/window_manager)
if [[ -z $wm ]]; then
	wm=$(xprop -notype -id "$(xprop -root -notype | awk '$1=="_NET_SUPPORTING_WM_CHECK:"{print $5}')" -f _NET_WM_NAME 8u | awk -F "\"" '/WM_NAME/ {print $2}' | head -n 1)
	echo "$wm" > /tmp/window_manager
fi

win_action() {
	if [[ $wm == bspwm ]]; then
		bspc_action "$@"
	fi
}

#
# Different Wm/Environment Functions
#

bspc_action() {
case $1 in
	dsel)
		if [[ $2 =~ ^[0-9]$ ]]; then
			bspc desktop -f ^"$2"
		else
			bspc desktop -f "$2"
		fi
		;;
	dcycle)
		bspc desktop -C "$2"
		;;
	drotate)
		if [[ $2 == backward ]]; then
			bspc desktop -R 270
		elif [[ $2 == forward ]]; then
			bspc desktop -R 90
		fi
		;;
	dbalance)
		bspc desktop -B
		;;
	wsel)
		if [[ $2 ==  left ]] || [[ $2 == down ]]; then
			if bspc control --get-status | grep -q "LT"; then
				# if not monocle, down will go down or left if no windows below
				if [[ $2 == down ]]; then
					bspc window -f down || bspc window -f left # || bspc desktop -f prev
				# if not monocle, down will go left or to previous desktop if no windows left
				else
					bspc window -f left || bspc desktop -f prev
				fi
			# so can change windows w/ same keys even in monocle (e.g. like a tabbed layout)
			else
				bspc window -f prev
			fi
		elif [[ $2 == up ]] || [[ $2 == right ]]; then
			if bspc control --get-status | grep -q "LT"; then
				if [[ $2 == up ]]; then
					bspc window -f up || bspc window -f right # || bspc desktop -f next
				else
					bspc window -f right || bspc desktop -f next
				fi
			else
				bspc window -f next
			fi
		else
			bspc window -f "$2"
		fi
		;;
	wmove)
		bspc window -s "$2"
		;;
	wmove_tod)
		bspc window -d ^"$2"
		;;
	wresize)
		if [[ $2 == left ]]; then
			bspc window --edge right -40 || bspc window --edge left -40
		elif  [[ $2 == down ]]; then
			bspc window --edge up +30 || bspc window --edge down +30
		elif  [[ $2 == up ]]; then
			bspc window --edge up -30 || bspc window --edge down -30
		elif  [[ $2 == right ]]; then
			bspc window --edge right +40 || bspc window --edge left +40
		fi
		;;
	wtoggle)
		bspc window -t "$2"
		;;
	wclose)
		bspc window -c
		;;
	wkill)
		bspc window -k
		;;
	lsel)
		bspc desktop -l "$2"
		;;
	psel)
		if [[ $2 == canceld ]]; then
			bspc desktop -c
		else
			bspc window -p "$2"
		fi
		;;
	gapc)
		bspc config -d focused window_gap $(($(bspc config -d focused window_gap) + $2 ))
		;;
	splitr)
		bspc window -r "$2"
		;;
	hide_all)
		bspc control --toggle-visibility
		;;
	reload)
		bspc query -T > "$BSPWM_TREE"; bspc query -H > "$BSPWM_HISTORY"; bspc quit && pkill panel
		;;
	quit)
		 bspc quit 1
		 ;;
	*)
		echo "not a valid action"
		exit 1
esac
}

tmux_action() {
case $1 in
	# wm desktop is equivalent to tmux window
	dsel)
		if [[ $2 == last ]]; then
			tmux select-window -l
		else
			tmux select-window -t "$2"
		fi
		;;
	dbalance)
		tmux select-layout even-horizontal
		;;
	# pane selection
	wsel)
		pane_id1=$(tmux display-message -p '#D')
		# if no pane left, go to previous window
		if [[ $2 == left ]]; then
			tmux select-pane -L
			pane_id2=$(tmux display-message -p '#D')
			if [[ $pane_id1 == "$pane_id2" ]]; then
				tmux select-window -p
			fi
		# if no pane below, go left
		elif [[ $2 == down ]]; then
			tmux select-pane -D
			pane_id2=$(tmux display-message -p '#D')
			if [[ $pane_id1 == "$pane_id2" ]]; then
				tmux select-pane -L
			fi
		elif [[ $2 == up ]]; then
			tmux select-pane -U && \
			pane_id2=$(tmux display-message -p '#D')
			if [[ $pane_id1 == "$pane_id2" ]]; then
				tmux select-pane -R
			fi
		elif [[ $2 == right ]]; then
			tmux select-pane -R
			pane_id2=$(tmux display-message -p '#D')
			if [[ $pane_id1 == "$pane_id2" ]]; then
				tmux select-window -n
			fi
		elif [[ $2 == last ]]; then
			tmux select-pane -l
		fi
		;;
	wmove)
		if [[ $2 == prev ]]; then
			tmux swap-pane -U
		elif [[ $2 == next ]]; then
			tmux swap-pane -D
		fi
		;;
	wresize)
		if [[ $2 == left ]]; then
			tmux resize-pane -L 5
		elif  [[ $2 == down ]]; then
			tmux resize-pane -D 3
		elif  [[ $2 == up ]]; then
			tmux resize-pane -U 3
		elif  [[ $2 == right ]]; then
			tmux resize-pane -R 5
		fi
		;;
	wcreate)
		tmux new-window
		;;
	split_top)
		tmux split-window -h
		;;
	split_left)
		tmux split-window
		;;
	wclose)
		tmux kill-pane
		;;
	pbreak)
		tmux break-pane
		;;
	lsel)
		# 'monocle'
		if [[ $2 == next ]]; then
			tmux resize-pane -Z
		else
			tmux select-layout "$2"
		fi
		;;
	*)
		echo "not a valid action"
		exit 1
esac
}

prefix_in_program_maps() {
case $2 in
	# 'r' is prefix key
	# desktop/tmux win switching
	a) $1 dsel 1;;
	r) $1 dsel 2;;
	s) $1 dsel 3;;
	t) $1 dsel 4;;
	d) $1 dsel 5;;
	h) $1 dsel 6;;
	# down or left
	n) $1 wsel down;;
	# up or right
	e) $1 wsel up;;
	# more desktop/tmux win switching
	i) $1 dsel 9;;
	o) $1 dsel 10;;
	b) $1 dbalance;;
	# last desktop/tmux win
	l) $1 dsel last;;
	# last win/tmux pane
	u) $1 wsel last;;
	# move to desktop
	A) $1 wmove_tod 1;;
	R) $1 wmove_tod 2;;
	S) $1 wmove_tod 3;;
	T) $1 wmove_tod 4;;
	D) $1 wmove_tod 5;;
	H) $1 wmove_tod 6;;
	N) $1 wmove_tod 7;;
	E) $1 wmove_tod 8;;
	I) $1 wmove_tod 9;;
	O) $1 wmove_tod 10;;
	# window movement
	ch) $1 wmove left;;
	cn) $1 wmove down;;
	ce) $1 wmove up;;
	ci) $1 wmove right;;
	cm) $1 wmove biggest;;
	# cycle move windows
	comma) $1 wmove prev;;
	period) $1 wmove next;;
	# window/tmux pane resizing
	mh) $1 wresize left;;
	mn) $1 wresize down;;
	me) $1 wresize up;;
	mi) $1 wresize right;;
	# win/tmux pane close
	x) $1 wclose;;
	# monocle toggle
	k) $1 lsel next;;
	# for wm even if tmux
	y) win_action wtoggle sticky;;
	f) win_action wtoggle fullscreen;;
	# presel/tmux spltting
	slash|apos)
		if [[ $1 == win_action ]]; then
			 win_action psel right
		elif [[ $1 == tmux_action ]]; then
			tmux split-window -h
		fi
		;;
	hyphen)
		if [[ $1 == win_action ]]; then
			 win_action psel up
		elif [[ $1 == tmux_action ]]; then
			tmux split-window
		fi
		;;
	# (tmux only)
	w) $1 wcreate;;
	bang) $1 pbreak;;
	*)
		echo "not a valid action"
		exit 1
esac
}

#
# Main
#

if [[ $1 == mpv ]]; then
	# different bindings depending on whether mpv is running in terminal (audio)
	# i set title for gui mpv to 'mpv - ${filename}' in .mpv/config
	title=$(xtitle | awk '{ print $1 }')
	if [[ $title == mpv ]]; then
		prefix_in_program_maps win_action "${@:2}"
	else
		prefix_in_program_maps tmux_action "${@:2}"
	fi
elif [[ $1 == tmux ]]; then
	tmux_action "${@:2}"
else
	win_action "$@"
fi

# vim: set ft=sh:
