#!/usr/bin/env python3
# TODO:
# make less ugly
# chapter range

import os
from subprocess import call

import argparse
parser = argparse.ArgumentParser()
parser.add_argument("inputfile", help="specify the name of the text file to convert to pdf")
parser.add_argument("-o", "--outputname", help="specify the name of the output pdf (default: output)")
parser.add_argument("-t", "--template", help="specify a different <template>.tex file (default: ~/bin/writing/template.tex)")
parser.add_argument("-l", "--chapterlevel", help="specify the number of asterisks for a chapter heading (default: 3)", type=int)
# nargs = 0
parser.add_argument("-e", "--example", action="store_true", help="add example lorem ipsum text")
parser.add_argument("-v", "--view", action="store_true", help="open pdf after generated with rifle")
parser.add_argument("-i", "--index", action="store_true", help="add a table of contents")
args = parser.parse_args()

import re
# raw string literal or will get unmatching parens error
noEscHsh = re.compile(r"(?<!\\)#")
noEscUsc = re.compile(r"(?<!\\)_")
noEscSlash = re.compile(r"(?<!\\)/")
noEscAst = re.compile(r"(?<!\\)\*")
# don't try to convert quotes in chapter/section heading (section{say{...}} doesn't work)
Dqt = re.compile(r"(?<!^[\*])\"")
# don't match single quotes preceded letter (e.g. won't match Jack's inflamed sense of rejection)
Sqt = re.compile(r"(?<!^[\*])(?<![A-Za-z_])\'")

def removeComment(line):
    line = line.lstrip()
    if line.startswith("#"):
        return "\n"
    pos = re.search(noEscHsh, line)
    if pos is None:
        # no comment; no need to modify
        pass
    else:
        line = line[:pos.start()] + "\n"
    return line

# remove structural headings; e.g.:
# * Exposition; dont want this heading to show up
# ** Chapter 1
def removeHeading(line):
    if args.chapterlevel:
        ignoreLevel = args.chapterlevel
    else:
        ignoreLevel = 3
    # will ignore any heading except chapter level heading and following level up to 30; kind of overkill...
    for i in range(29):
        headingLevel = i + 1
        if headingLevel != ignoreLevel and headingLevel != ignoreLevel + 1:
            if line.startswith("*" * headingLevel + " "):
                return "\n"
    return line

def escapeForLatex(line):
    line = line.replace("&", "\\&")
    line = line.replace("%", "\\%")
    line = line.replace("{", "\\{")
    line = line.replace("}", "\\}")
    line = line.replace("^", r"\\textasciicircum{}")
    # only create \latex_something{}s after escaping original curly brackets
    line = line.replace("~", "\\textasciitilde{}")
    # replace \\ initially (so no possibility for something like \\#)
    line = line.replace("\\\\", "\\textbackslash{}")
    return line

def formatSingles(line):
    line = line.replace("...", "â€¦")
    line = line.replace("..", "\\_\\_\\_\\_\\_\\_")
    return line

def formatPairs(line):
    # count number of non-escaped symbols
    underscoreNum  = len(tuple(re.finditer(noEscUsc, line)))
    asteriskNum    = len(tuple(re.finditer(noEscAst, line)))
    forwdSlashNum  = len(tuple(re.finditer(noEscSlash, line)))
    doubleQuoteNum = len(tuple(re.finditer(Dqt, line)))
    singleQuoteNum = len(tuple(re.finditer(Sqt, line)))

    # ensure even (if matching character left off, formatting extends to end)
    if underscoreNum % 2 != 0:
        line = line.rstrip("\n") + "_\n"
        underscoreNum += 1
    if asteriskNum % 2 != 0:
        line = line.rstrip("\n") + "*\n"
        asteriskNum += 1
    if forwdSlashNum % 2 != 0:
        line = line.rstrip("\n") + "/\n"
        forwdSlashNum += 1

    # alternating replace with opening and closing
    for i in range(underscoreNum//2):
        line = re.sub(noEscUsc, r"\\underline{", line, count=1)
        line = re.sub(noEscUsc, "}", line, count=1)
    for i in range(asteriskNum//2):
        line = re.sub(noEscAst, r"\\textbf{", line, count=1)
        line = re.sub(noEscAst, "}", line, count=1)
    for i in range(forwdSlashNum//2):
        line = re.sub(noEscSlash, r"\\textit{", line, count=1)
        line = re.sub(noEscSlash, "}", line, count=1)
    for i in range(doubleQuoteNum//2):
        line = re.sub(Dqt, r"\\say{", line, count=1)
        line = re.sub(Dqt, "}", line, count=1)
    for i in range(singleQuoteNum//2):
        line = re.sub(Sqt, r"\\say{", line, count=1)
        line = re.sub(Sqt, "}", line, count=1)

    # unescape user-ecaped asterisks and forward slashes (underscores need to be escaped for LaTeX though, so don't need to do anything)
    line = line.replace("\\*", "*")
    line = line.replace("\\/", "/")

    return line

def formatChapters(line, chapterChar, sectionChar):
    # match section char first since longer sequence of asterisks
    if line.startswith(sectionChar):
        line = "\\section{" + line.rstrip("\n").lstrip(sectionChar) + "}\n"
    elif line.startswith(chapterChar):
        line = "\\chapter{" + line.rstrip("\n").lstrip(chapterChar) + "}\n"
    return line


def main():
    inFile = args.inputfile
    if args.outputname:
        outFile = args.output + ".tex"
        outPdf  = args.output + ".pdf"
    else:
        outFile = "output.tex"
        outPdf  = "output.pdf"
    if args.template:
        template = args.template
    else:
        home = os.path.expanduser("~")
        template = home + "/bin/writing/template.tex"
    # asterisks must be followed by a space to be considered a heading
    if args.chapterlevel:
        chapterChar = "*" * args.chapterlevel + " "
        sectionChar = chapterChar.rstrip() + "* "
    else:
        chapterChar = "*** "
        sectionChar = "**** "

    f = open(inFile, "r")
    lines = f.readlines()
    newText = ""
    for line in lines:
        # erease newText contents before a '###'
        if line.startswith("###"):
            newText = ""
            continue
        line = removeComment(line)
        line = removeHeading(line)
        # don't continue processing if entire line was comment or heading
        if line == "\n":
            newText += line + "\n"
            continue
        # escape first ( or {}s created for formatting will be escaped)
        line = escapeForLatex(line)
        # format chapters before pairs because * also used for bold
        line = formatChapters(line, chapterChar, sectionChar)
        line = formatSingles(line)
        line = formatPairs(line)
        newText += line + "\n"

    if args.example:
        newText += "\n\\lipsum\\lipsum\n"

    # create a .tex file
    if not os.path.isdir("output"):
        os.mkdir("output")
    os.chdir("output")
    fTemp = open(template, "r")
    templateText = fTemp.read()
    if args.index:
        templateText += "\\begin{document}\n\\tableofcontents\n"
    else:
        templateText += "\\begin{document}\n"
    newText = templateText + newText + "\\end{document}"
    fOut = open(outFile, "w")
    fOut.write(newText)
    f.close()
    fTemp.close()
    fOut.close()

    call(["xelatex", outFile])

    if args.view:
        call(["rifle", outPdf])


if __name__ == "__main__":
    main()
