#!/usr/bin/env bash
# open ranger with downloaded file(s) cut; using instead of 'save as' dialog
# $ dl_move (toggle|bulk_store|</absolute/path/to/file to move>)
# TODO
# - cleanup
# - re-use fm_open for moving contents of dir (test -d)
# - better fix escaping; this doesn't work "test -- #1.htm"?

fm_type=ranger
temp_dir=/tmp/dl_move
detox=false
while getopts :ed opt
do
	case $opt in
	e) fm_type=emacs;;
	d) detox=true;;
	*) echo "Invalid flag specified" >&2 && exit 1;;
    esac
done

if [[ -z $1 ]]; then
	echo "Positional argument for file path required" >&2
	exit 1
fi

# automatic moving
if [[ $1  =~ ^.*\.torrent$ ]]; then
	mv "$1" /home/transmission/torrents
	exit 0
fi

function fm_open() { # <file to cut>
	if [[ $fm_type == emacs ]]; then
		emacsclient -c \
			-e "(noct-with-q-to-exit (dired-jump nil \"$1\"))" \
			-e "(call-interactively #'noct-dired-toggle-mark)"
	else
		kitty -- ranger --selectfile="$1" --cmd=cut
	fi
}

mkdir -p $temp_dir
# toggle script
# full path of file passed in, so a file named toggle will be /...toggle
if [[ $1 == toggle ]]; then
	if [[ -f $temp_dir/off ]]; then
		rm $temp_dir/off
	else
		touch $temp_dir/off
	fi
# turns on "bulk store" mode; all files will be saved in the same temp dir
elif [[ $1 == bulk_store ]] && [[ ! -f $temp_dir/temp_on ]]; then
	rm $temp_dir/off 2> /dev/null
	mkdir -p $temp_dir/temp_store
	touch $temp_dir/temp_on
# ends "bulk store" mode and opens ranger with the previously saved files cut
elif [[ $1 == bulk_store ]]; then
	if [[ $fm_type == ranger ]]; then
		rm $temp_dir/temp_on
		touch $temp_dir/move_to_dir
		# no way to do this currently (see above ranger issue)
		# "ranger --cmd=mark --cmd=cut" &
		# "ranger --selectfiles='*'" &

		# ranger --choosedir=/dev/stdout

		kitty -- ranger --choosedir=/$temp_dir/move_to_dir
		move_to_dir=$(< $temp_dir/move_to_dir)
		if [[ -n $move_to_dir ]]; then
			mv $temp_dir/temp_store/* "$move_to_dir"
		fi
		rm $temp_dir/move_to_dir
	fi
elif [[ ! -f $temp_dir/off ]]; then
	filename=${*: -1}
	if [[ -f $temp_dir/temp_on ]]; then
		mv "$filename" $temp_dir/temp_store
		if $detox; then
			file=$(basename "$filename")
			detox "$temp_dir/temp_store/$file"
		fi
	else
		# conditionally executing with pentadactyl isn't possible:
		# https://github.com/5digits/dactyl/issues/29
		# prevent multiple ranger instances due to autocmd pileup
		# may not be necessary with tridactyl
		last_filename="$(< $temp_dir/last_filename)"
		echo "$filename" > $temp_dir/last_filename
		if [[ ! $filename =~ ^/tmp.* ]] && \
			[[ ! $last_filename == "$filename" ]]; then
			if $detox; then
				detox_info=$(detox -v "$filename")
				if [[ $(echo "$detox_info" | wc -l) -ge 2 ]]; then
					filename=$(echo "$detox_info" | tail -n 1 | \
						awk -F ' -> ' '{print $NF}')
				fi
			fi
			fm_open "$filename"
		fi
	fi
fi
