*Notes on Text Editing*
* Why Modality /and/ Chording?
/Note: When I say chording here, I'm talking about using modifiers not chords like in steno or key-chord.el./

Modality and chording are not mutually exclusive. They both have a good use case and can be used together. Even if they don't realize it, Emacs and Vim generally don't exclusively stick to one model.

Modality saves keystrokes by reducing the number of required modifier keys (usually to zero). Even if you don't care about the number of modifiers required (e.g. you have a well-placed thumbcluster on your keyboard), modality saves keypresses by allowing the same keys to be used for different actions in different contexts. Trying to jam every command into one context quickly results having to further contextualize keybindings using prefix keys (i.e. longer sequences of keys are required for common actions). This is not ideal any time you want to take related actions in sequence. With modality, instead of using a prefix every time, you only need to use it the first time. There are plenty of commonly used Emacs packages that embrace some form of modality like hydra, lispy, org speed keys/worf, etc.

The downside of modality is that context switching is not always automatic and usually requires explicit keypresses. Modality still manages to save keypresses for the following reasons:

- Any time you need to take several related actions in sequence, you can potentially trade pressing a prefix key every time for only pressing it once to enter a new mode/context and pressing one key later to leave the mode/context, thereby saving keystrokes.
- Actions can sometimes be grouped together with mode switching (e.g. vim's =o=, =O=, =a=, =A=, etc. which insert a newline or take a navigational action and then switch to insert mode).
- Mode switching does not always need to take place right before an action. Vim users generally prefer to stay in normal mode, meaning that pressing =ESC= right before pressing normal mode keys is often unnecessary. For example, if I stop typing because I'm done writing the current paragraph or function and am thinking about what change to make next, need to leave my computer, or am doing anything else besides typing, I'll often enter normal mode by reflex. When I come back to editing, I'm already in normal mode and can immediately use editing commands or navigate to where I want using non-modified keypresses and start typing again. One the other hand, if I plan to keep typing in the same place, I may stay in insert mode. Depending on the person and usage, this may not come into play as often as the previous points, but it is worth pointing out that mode changes can happen during idle time.

That all said, it's clear that modality is (only) suited for situations where related actions are taken in sequence. You can get away with binding some one-off actions in normal mode if you default to it (e.g. I dedicate certain prefix keys to window/buffer/file navigation in normal mode), but using modality for all one-off actions will of course be inefficient and potentially jarring. This is where chords come in. Chords are perfectly suited for triggering the most commonly used one-off actions. When typing text, chords are much better suited for any action that is taken once before returning to typing. This might include actions like deleting the current word (e.g. after a typo), deleting the current line, and basic navigation commands. It's worth noting that even vim binds chords in insert mode (e.g. =C-u= to delete to the beginning of the current insertion).

People may prefer to mainly stick to one style or the other, but normal vs. visual vs. insert vs. etc. mode is not the only type of modality. A lot of the benefits of modality can be had without using Vim's style of having multiple editing modes by default. Some Emacs users prefer to not use evil but still make uses of hydras for grouping related keybindings. Some Vim users rely on chords for one-off navigational/editing tasks in insert mode. The best system is not one or the other but a compromise between the two.
