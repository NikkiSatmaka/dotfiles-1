* Packages
** Company Mode
Consider trying https://github.com/company-mode/company-statistics
#+begin_src emacs-lisp
(defun trishume:company-backend-with-yas (backend)
  "Add :with company-yasnippet to company BACKEND.
Taken from https://github.com/syl20bnr/spacemacs/pull/179."
  (if (and (listp backend) (member 'company-yasnippet backend))
      backend
    (append (if (consp backend)
                backend
              (list backend))
            '(:with company-yasnippet))))

(defun dgutov:company-preview-if-explicit-action-frontend (command)
  "Show completions in buffer as cycle through menu.
https://github.com/company-mode/company-mode/issues/216#issuecomment-69871034"
  (when (or (not (eq command 'post-command))
            (and
             (company-explicit-action-p)
             company-common
             (or (eq (company-call-backend 'ignore-case) 'keep-prefix)
                 (string-prefix-p company-prefix company-common))))
    (company-preview-frontend command)))

(use-package company
  :ensure t
  :defer 3
  :diminish ""
  :config
  (setq company-backends
        (mapcar #'trishume:company-backend-with-yas company-backends))
  (global-company-mode))

;; setting idle delay too low can cause a lot of lag depending on the backend
(setq company-idle-delay 0.15
      company-tooltip-limit 15
      company-minimum-prefix-length 2
      ;; automatically complete after entering menu
      company-auto-complete #'company-explicit-action-p
      company-auto-complete-chars " )."
      company-show-numbers nil
      ;; company-tooltip-align-annotations t
      company-frontends
      (list #'company-pseudo-tooltip-unless-just-one-frontend
            ;; #'company-echo-metadata-frontend
            #'dgutov:company-preview-if-explicit-action-frontend))

(defvar noct:company-complete-then-cycle
  (general-predicate-dispatch #'company-manual-begin
    (company-explicit-action-p) #'company-complete-common-or-cycle)
  "Menu-item used to first explicitly enter company menu and then cycle.")

(general-emacs-define-key company-active-map
  "C-h" nil
  "C-w" nil
  "<tab>" noct:company-complete-then-cycle
  "TAB" noct:company-complete-then-cycle)

(general-emacs-define-key company-active-map
  :predicate '(company-explicit-action-p)
  "<return>" #'company-complete-selection
  "RET" #'company-complete-selection
  "<up>" #'company-select-previous-or-abort
  "<down>" #'company-select-next-or-abort)

(use-package company-quickhelp
  :ensure t
  :defer t
  :init
  (add-hook 'company-mode-hook #'company-quickhelp-mode))
#+end_src

* Applications
** Pdf Tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  ;; :mode ("\\.pdf$" . pdf-view-mode)
  :init (pdf-tools-install))

(defun lit/pdf-page-as-text ()
  "Inserts current pdf page into a buffer for keyboard selection."
  (interactive)
  (pdf-view-mark-whole-page)
  (pdf-view-kill-ring-save)
  (switch-to-buffer (make-temp-name "temp"))
  (yank))

(evil-define-key 'normal pdf-view-mode-map
  "h" 'backward-page
  "n" '(lambda () (interactive) (pdf-view-next-line-or-next-page 5))
  "e" '(lambda () (interactive) (pdf-view-previous-line-or-previous-page 5))
  "i" 'forward-page
  (kbd "RET") 'pdf-view-scroll-up-or-next-page
  "m" 'pdf-view-position-to-register
  "M" 'pdf-view-position-to-register
  "'" 'pdf-view-jump-to-register
  "=" 'pdf-view-scale-reset
  "u" 'pdf-view-shrink
  "y" 'pdf-view-enlarge
  "w" 'pdf-view-fit-width-to-window
  "W" 'pdf-view-fit-height-to-window
  ;; open urls
  "f" 'pdf-links-action-perform
  "l" 'pdf-history-backward
  "L" 'pdf-history-forward
  "/" 'pdf-occur
  "o" 'pdf-outline
  ;; go to specific page number (can take number argument)
  "j" 'pdf-view-goto-page
  "b" 'pdf-view-midnight-minor-mode
  [down-mouse-1] 'pdf-view-mouse-extend-region
  "y" 'pdf-view-kill-ring-save
  ;; for easier selection; just `kill-this-buffer' when done
  "Y" 'lit/pdf-page-as-text)

(add-to-list 'golden-ratio-exclude-modes 'pdf-outline-buffer-mode)
(evil-define-key 'normal pdf-outline-buffer-mode-map
  "q" 'pdf-outline-quit-and-kill
  "i" 'pdf-outline-follow-link
  "a" 'pdf-outline-follow-link-and-quit
  ;; display link without leaving outline buffer
  "I" 'pdf-outline-display-link
  "o" 'pdf-outline-select-pdf-window
  ;; in outline buffer move to page that is in view buffer
  "p" 'pdf-outline-move-to-current-page
  ;; like pdf-view-goto-page
  "j" 'pdf-outline-move-to-page
  (kbd "RET") 'pdf-outline-toggle-subtree)
#+end_src
** Elfeed
*** Feeds and Settings
#+begin_src emacs-lisp
(setq elfeed-feeds
      '(("http://nullprogram.com/feed/" emacs)
        ("http://oremacs.com/atom.xml" emacs)
        ("http://feeds.feedburner.com/usevim" vim)
        ("http://blog.binchen.org/rss.xml" emacs)
        ("http://wololo.net/feed/" psp/vita)))

(setq-default elfeed-search-filter "@3-weeks-ago +unread ")
#+end_src
*** Mappings
Because it's just a buffer, I get some vim bindings for free (e.g. gg and G) and keep my evil remaps (e.g. for helm-swoop).
#+begin_src emacs-lisp
;; mappings for entry list
(evil-define-key 'normal elfeed-search-mode-map
  ;; fetch feed updates; default: G
  "o" 'elfeed-update
  ;; refreash view of feed listing; default: g
  "O" 'elfeed-search-update--force
  ;; filter
  "f" 'elfeed-search-live-filter
  ;; reset to default filter
  "F" '(lambda () (interactive) (elfeed-search-set-filter "@3-weeks-ago +unread "))
  ;; open url in specified browser
  "b" 'elfeed-search-browse-url
  ;; read current entry or selected (remove unread tag)
  "h" 'elfeed-search-untag-all-unread
  ;; enter show mode on entry
  "i" 'elfeed-search-show-entry
  ;; mark current entry or selected unread
  "u" 'elfeed-search-tag-all-unread
  ;; add a tag to current entry or selected
  "a" 'elfeed-search-tag-all
  ;; star entries to come back later to and do something about
  "s" '(lambda () (interactive) (elfeed-search-toggle-all '*))
  ;; remove a tag from current entry or selected
  "d" 'elfeed-search-untag-all)

;; mappings for when reading a post
(evil-define-key 'normal elfeed-show-mode-map
  (kbd "RET") 'elfeed-search-browse-url
  "h" 'elfeed-kill-buffer
  ;; next post
  "i" 'elfeed-show-next
  ;; add a tag to current entry
  "a" 'elfeed-show-tag
  "s" '(lambda () (interactive) (elfeed-search-toggle-all '*))
  ;; remove a tag from current entry
  "d" 'elfeed-show-untag)
#+end_src
