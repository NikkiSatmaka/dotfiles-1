# vim: ft=sh
# maybe switch to rdiff-backup
# maybe combine sndatab and bahamut
function bkhelp() {
	echo "
sndot            - sync dotfiles & vimwiki to ag-sys (soma tc volume)
bahamut          - backup soma tc volume
	Takes one argument corresponding to the name of the mounted drive to backup to.
	-m           specify a different drive mount point (default: /media)
	-o           backup to copy in ~/grive folder and sync with google drive
	Examples:
	  $ bahamut my_usb
	  $ bahamut -m /mnt another_usb
	  $ bahamut -o
sin              - small/quick online encrypted backup
sndatab          - sync datab to external drive
	The same as bahamut except without -o and for datab.
	- bkdsea         - sync ~/datab to seagate
	- bkdbuffalo     - sync ~/datab to buffalo
snhometoexternal - sync ~/ to external drive
	Takes one argument corresponding to the location of the mounted usb to backup to. Also runs both sndatab and bahamut for the given external drive.
	- bkhsea         - sync ~/ to seagate
	- bkhbuffalo     - sync ~/ to buffalo
(the following need to be updated)
snpspbk          - backup psp memcard to database
snpspdata        - backup psp savedata to database
"
}

# Mounting# {{{
# unmount most recent external drive
alias uned="devmon -c"
# unmount all external
alias uneda="devmon -u"
# eject disk
alias ej="sudo eject /dev/sr0"
# }}}

# TC mounting and unmounting# {{{
function mount_tc() {
	tc_volume=$1
	mount_point=$2
	# don't print errors
	if [ "$(truecrypt -t -l 2> /dev/null | grep $tc_volume)" != "" ]; then
		echo "Already mounted."
	else
		if [ ! -f $tc_volume ]; then
			echo "Error. The specified path ($tc_volume) for the tc volume does not exist."
			return 1
		elif [ "$(ls -A $mount_point)" ]; then
			echo "Error. Files exist in ($mount_point). Move/delete them."
			return 1
		else
			mkdir -p $mount_point
			truecrypt -t --protect-hidden=no --keyfiles= $tc_volume $mount_point
		fi
	fi
}

# prevent errors when a volume already is unmounted
function umount_tc() {
	if [ -n "$1" ]; then
		tc_volume=$1

		# only try to unmount if mounted
		if [ "$(truecrypt -t -l 2> /dev/null | grep $tc_volume)" != "" ]; then
			truecrypt -t -d $tc_volume
		fi
	else
		# umount all
		truecrypt -t -d
	fi
}

# alias -g mountacct='truecrypt ~/ag-sys/Else/ACCTS ~/blemish'
mountacct() {
	mkdir -p ~/blemish
	# pasword will appear in process listing if done like this
	# truecrypt -p "$(gpg2 --for-your-eyes-only --no-tty -d ~/.pass.gpg | awk '/accts/ {print $2}')" ~/ag-sys/Else/ACCTS ~/blemish
	truecrypt ~/ag-sys/Else/ACCTS ~/blemish
}

alias umountacct="truecrypt -t -d ~/ag-sys/Else/ACCTS"

# }}}

# Shared# {{{
alias mountsoma="mount_tc $HOME/soma $HOME/ag-sys/"
alias umountsoma="umount_tc $HOME/soma"
# sync ~/grive to google drive
alias sngdrive="cd ~/grive/ ; grive -V"
alias spideroak="SpiderOak"

function sndot() {
	# dotfiles backup
	rsync -avrh --progress --delete --exclude={"bundle/*","elpa/*",".mpd/log",".mutt/cache/*","ppsspp/PSP/SAVEDATA/*",".vim/undo",".vim/thesaurus"} --prune-empty-dirs ~/dotfiles ~/ag-sys/Backup/
	rsync -avrh --progress --delete ~/vimwiki ~/ag-sys/Backup/
}
# }}}

# soma backup# {{{
function bahamut() {
	online=false
	mountdir=/media
	while getopts :m:ho opt
	do
		case $opt in
		m) mountdir=$OPTARG;;
		o) online=true;;
		h) bkhelp && return 1;;
		*) echo "invalid option" && return 1;;
		esac
	done
	# http://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script
	echo "Using --delete with rsync. Continue? (y/n)"
	# read is different for zsh
	read -q REPLY
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		return 1
	else
		if $online; then
			mountsoma && \
			mount_tc $HOME/grive/soma_bk $HOME/ag-sys-bk-onl && \
			sndot && \
			rsync -avrhP --delete $HOME/ag-sys/ $HOME/ag-sys-bk-onl && \
			truecrypt -t -d ~/grive/soma_bk && \
			sngdrive && \
			echo "Backup of soma to gdrive completed succesfully."
		else
			usb_location="$mountdir/${@: -1}"
			if [ -d "$usb_location" ]; then
				# if soma volume doesn't already exist, copy it over
				if [ ! -f $usb_location/soma ]; then
					umountsoma && \
					rsync -avhP $HOME/soma $usb_location && \
					echo "Backup of soma to $usb_location completed succesfully." || \
					echo "bahamut failed."
				else
					mountsoma && \
					mount_tc $usb_location/soma $HOME/ag-sys-bk && \
					sndot && \
					rsync -avrhP --delete $HOME/ag-sys/ $HOME/ag-sys-bk) && \
					echo "Backup of soma to $usb_location completed succesfully." || \
					echo "bahamut failed."
					truecrypt -t -d $usb_location/soma
				fi
			else
				echo "Error. USB drive ${@: -1} is not mounted at $mountdir."
				return 1
			fi
		fi
	fi
}

# }}}

# quick net backup# {{{
# add grive option
# ~8mb volume

alias umountsmallestbktc="truecrypt -t -d ~/grive/smallest_soma_bk"

function sin() {
	mountsoma && \
	mount_tc $HOME/grive/smallest_soma_bk $HOME/smallest_bk && \
	sndot && \
	rsync -avrh --progress --delete --prune-empty-dirs --exclude={".Trash/*",".git/*","Portable/*","Gaming/*","Large/*","Customization/win/*","chats/*","dotfiles/*"} --include={"*/","*.txt","*.tex","*.md","*.mkd","*.mkdn",} --exclude='*' ~/ag-sys/ ~/smallest_bk && \
	umount_tc ~/grive/smallest_soma_bk && \
	SpiderOak --batchmode --backup='~/grive/smallest_soma_bk' && \
	echo "Minimal backup to Spider Oak completed." || \
	echo "Minimal backup to Spider Oak failed."
}
# }}}

# home backup# {{{
# add music back; smarter soma sync; add important from mail, wine, etc.
# add more useless dirs to exclude
function snhometoexternal() {
	mountdir=/media
	while getopts :m:h opt
	do
		case $opt in
		m) mountdir=$OPTARG;;
		h) bkhelp && return 1;;
		*) echo "invalid option" && return 1;;
		esac
	done
	echo "Using --delete with rsync. Continue? (y/n)"
	read -q REPLY
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		return 1
	else
		exthd_loc="$mountdir/${@: -1}"
		if [ -d "$exthd_loc" ]; then
			mkdir -p "$exthd_loc/home_bk"
			rsync -avrhP --delete --include={".cabal/",".cards/",".gnupg/",".mail/",".mozilla/","_repos/","_school/","anime/","dotfiles/",".gem/","Move/","Music/","ps_vita/","vimwiki/","wallpaper/"} --exclude="/*" --prune-empty-dirs ~/ "$exthd_loc/home_bk" || echo "snhometoexternal failed."
			# sync truecrypt volumes as well as well
			bahamut -m $exthd_loc home_bk
			syncdatab -m $exthd_loc home_bk
		else
			echo "Error. External drive ${@: -1} is not mounted at $mountdir."
			return 1
		fi
	fi
}

function snhometoseagate() {
	snhometoexternal seagate
}
alias bkhsea="snhometoseagate"

function snhometobuffalo() {
	snhometoexternal "/media/HD-CEU2\ Backup"
}
alias bkhbuffalo="snhometobuffalo"

# }}}

# backup database to external harddrive# {{{
alias mountdatab="mount_tc $HOME/datab $HOME/database"
alias umountdatab="umount_tc ~/datab"

function sndatab() {
	mountdir=/media
	while getopts :m:ho opt
	do
		case $opt in
		m) mountdir=$OPTARG;;
		h) bkhelp && return 1;;
		*) echo "invalid option" && return 1;;
		esac
	done
	echo "Using --delete with rsync. Continue? (y/n)"
	read -q REPLY
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]
	then
		return 1
	else
		exthd_loc="$mountdir/${@: -1}"
		if [ -d "$exthd_loc" ]; then
			# if soma volume doesn't already exist, copy it over
			if [ ! -f "$exthd_loc/datab" ]; then
				umountdatab && \
				rsync -avhP $HOME/datab "$exthd_loc" && \
				echo "Backup of datab to $exthd_loc completed succesfully." || \
				echo "sndatab failed."
			else
				mountdatab && \
 				mount_tc "$exthd_loc/datab" $HOME/database-bk && \
				sndot && \
				rsync -avrhP --delete $HOME/database/ $HOME/database-bk && \
				echo "Backup of datab to $exthd_loc completed succesfully." || \
				echo "sndatab failed."
				truecrypt -t -d "$exthd_loc/datab"
			fi
		else
			echo "Error. External drive ${@: -1} is not mounted at $mountdir."
			return 1
		fi
	fi
}

function bkdatabtoseagate() {
	syncdatab /media/seagate
}
alias bkdsea="bkdatabtoseagate"

function bkdatabtobuffalo() {
	syncdatab /media/HD-CEU2\ Backup
}
alias bkdbuffalo="bkdatabtobuffalo"

# }}}

# need to be updated
# psp backup {{{
# vita
alias cm="qcma --verbose"

# leave out psp isos?
snpspbk() {
	echo "Using --delete with rsync. Continue? (y/n)"
	read -q REPLY
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]
	then
		return 1
	else
		if [ -d /media/MS0/ ];then
			mountdatab && \
			rsync -avrh --progress --delete /media/MS0/ ~/database/database/Gaming/handheld/PSP/PSP\ Backup/
		else
			echo "Error. PSP is not mounted or directory is named differently."
			return 1
		fi
	fi
}

# save databackup
snpspdata() {
	echo "Using --delete with rsync. Continue? (y/n)"
	read -q REPLY
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]
	then
		return 1
	else
		if [ -d /media/MS0/ ];then
			mountdatab && \
			rsync -avrh --progress --delete /media/MS0/SAVEDATA ~/database/database/Gaming/handheld/PSP/savedata/
		else
			echo "Error. PSP is not mounted or directory is named differently."
			return 1
		fi
	fi
}
# }}}
