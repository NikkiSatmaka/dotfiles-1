#!/bin/bash
# TODO:
# Maybe switch to tcplay at some point
# Combine common past of bahamut and sndatab

RUN_BY_CRON="${RUN_BY_CRON:-false}"
# Help {{{
function bkhelp() {
	echo "
sndot            - sync dotfiles & vimwiki to ag-sys (soma tc volume)
bahamut          - backup soma tc volume
	Takes one argument corresponding to the name of the mounted drive to backup to.
	-m           specify a different drive mount point (default: /media)
	-o           backup to copy in ~/grive folder and sync with google drive
	Examples:
	  $ bahamut my_usb
	  $ bahamut -m /mnt another_usb
	  $ bahamut -o
sin              - small/quick online encrypted backup
sndatab          - sync datab to external drive
	The same as bahamut except without -o and for datab.
	- bkdsea         - sync ~/datab to seagate
	- bkdbuffalo     - sync ~/datab to buffalo
snhometoexternal - sync ~/ to external drive
	Takes one argument corresponding to the location of the mounted usb to backup to. Also runs both sndatab and bahamut for the given external drive.
	- bkhsea         - sync ~/ to seagate
	- bkhbuffalo     - sync ~/ to buffalo
(the following need to be updated)
snpspbk          - backup psp memcard to database
snpspdata        - backup psp savedata to database
"
}
# }}}

# Mounting {{{
# unmount most recent external drive
alias uned="devmon -c"
# unmount all external
alias uneda="devmon -u"
# eject disk
alias ej="sudo eject /dev/sr0"
function maybe_eject() {
	echo "Eject last mounted drive? (y/n)"
	# read is different for zsh
	read -q REPLY
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		return 1
	else
		devmon -c
	fi
}
# }}}

# TC mounting and unmounting {{{
function mount_tc() {
	tc_volume=$1
	mount_point=$2
	if [[ ! -f "$tc_volume" ]]; then
		echo "Error. The specified path ($tc_volume) for the tc volume does not exist."
		return 1
	elif truecrypt -t -l 2> /dev/null | grep -qE "^[0-9]: $tc_volume"; then
		echo "$tc_volume is already mounted."
		return 0
	elif [[ -n "$(ls -A "$mount_point" 2> /dev/null)" ]]; then
		echo "Error. Files exist in $mount_point or it is not a directory."
		return 1
	else
		mkdir -p "$mount_point"
		truecrypt -t --protect-hidden=no --keyfiles= "$tc_volume" "$mount_point"
	fi
}

# prevent errors when a volume already is unmounted
# give full path of volume as arg
function umount_tc() {
	if [[ -n "$1" ]]; then
		tc_volume=$1
		# only try to unmount if mounted
		if [[ "$(truecrypt -t -l 2> /dev/null | grep "$tc_volume")" != "" ]]; then
			truecrypt -t -d "$tc_volume" && \
			echo "Umounted $tc_volume successfully."
		else
			echo "$tc_volume is not mounted."
		fi
	else
		# umount all
		truecrypt -t -d
	fi
}

# }}}

# zuluMount mounting and umounting {{{
# holding off on for now... may just switch to veracrypt instead of tc-play

# limitations:
# - Can't choose full path (only directly under $HOME (or /run/media/private/$USER))
mount_z() {
	volume=$1
	mount_point=$2
	if [[ ! $mount_point =~ ^${HOME}.* ]]; then
		# mount point must be under home
		echo "Error. Mount point must be a full path directly under \$HOME."
		return 1
	elif [[ ! -f "$volume" ]]; then
		echo "Error. The specified path ($volume) for the volume does not exist."
		return 1
	elif zuluMount-cli -l | grep -q "^$volume"; then
		# if try to mount an already mounted volume with zuluMout will get error:
		# "ERROR: Could not create mount point, invalid path or path already taken"
		# this will give an accurate message
		echo "$volume is already mounted."
		return 0
	fi

	if [[ -d "$mount_point" ]]; then
		# zuluMount must make the mount point
		rmdir "$mount_point" 2> /dev/null || \
			(echo "Error. Files exist in ($mount_point). Move/delete them." && return 1)
	elif [[ -e "$mount_point" ]]; then
		echo "Error. $mount_point exists and is not a directory."
		return 1
	fi

	# make up to the last dir of the mount path
	mkdir -p "${mount_point%/*}"
	# must be a member of zulumount group for -e?
	# not actually necessary to remove $HOME, since zuluCrypt will only take last dir in given path
	zuluMount-cli -m -e mount-prefix=home -d "$volume" -z "${mount_point/$HOME\//}"
}

# give full path of volume as arg
# problems:
# get "ERROR: Close failed, volume is not open or was opened by a different user"
# when the reason is actually that the volume is in use
umount_z() {
	if [[ -n "$1" ]]; then
		volume=$1
		if zuluMount-cli -l | grep -q "^$volume"; then
			zuluMount-cli -u -d "$volume" && echo "Umounted $tc_volume successfully."
		else
			# prevent non-zero exit value if volume isn't mounted
			echo "$volume is not mounted."
		fi
	else
		non_system_volumes=$(zuluMount-cli -N)
		while read -r volume; do
			zuluMount-cli -u -d "$volume"
		done <<< "$non_system_volumes"
	fi
}

# }}}

# Shared {{{
mountacct() {
	# pasword will appear in process listing if done like this
	# truecrypt -p "$(gpg2 --for-your-eyes-only --no-tty -d ~/.pass.gpg | awk '/accts/ {print $2}')" ~/ag-sys/Else/ACCTS ~/blemish
	mount_tc "$HOME"/ag-sys/else/ACCTS "$HOME"/blemish
}
umountacct() {
	umount_tc "$HOME"/ag-sys/else/ACCTS
}

function mountsoma() {
	mount_tc "$HOME"/soma "$HOME"/ag-sys/
}
function umountsoma() {
	umount_tc "$HOME"/ag-sys/Else/ACCTS
	umount_tc "$HOME"/soma
}
# sync ~/grive to google drive
alias sngdrive="cd ~/grive/ ; grive -V"
alias spideroak="SpiderOak"

# shared rsync flags
alias backup_rsync="rsync -avhmP --delete --ignore-errors"

function sndot() {
	# dotfiles backup
	backup_rsync --exclude={"bundle/*","elpa/*",".mpd/log",".mutt/cache/*","ppsspp/PSP/SAVEDATA/*",".vim/undo",".vim/thesaurus"} --prune-empty-dirs ~/dotfiles ~/ag-sys/Backup/
	backup_rsync ~/vimwiki ~/ag-sys/Backup/
}
# }}}

# soma backup {{{
function bahamut() {
	online=false
	mountdir=/media
	no_eject=false
	while getopts :m:hon opt
	do
		case $opt in
		m) mountdir=$OPTARG;;
		o) online=true;;
		n) no_eject=true;;
		h) bkhelp && return 1;;
		*) echo "invalid option" && return 1;;
		esac
	done
	# http://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script
	echo "Using --delete with rsync. Continue? (y/n)"
	# read is different for zsh
	read -q REPLY
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		return 1
	else
		if $online; then
			mountsoma && \
			mount_tc "$HOME"/grive/soma_bk "$HOME"/ag-sys-bk-onl && \
			sndot && \
			rsync_backup "$HOME"/ag-sys/ "$HOME"/ag-sys-bk-onl && \
			umount_tc ~/grive/soma_bk && \
			sngdrive && \
			echo "Backup of soma to gdrive completed succesfully."
		else
			usb_location=$mountdir/${*: -1}
			if [[ -d "$usb_location" ]]; then
				# if soma volume doesn't already exist, copy it over
				if [[ ! -f "$usb_location/soma" ]]; then
					umountsoma && \
					backup_rsync "$HOME"/soma "$usb_location" && \
					echo "Backup of soma to $usb_location completed succesfully." || \
					echo "bahamut failed."
				else
					mountsoma && \
					mount_tc "$usb_location"/soma "$HOME"/ag-sys-bk && \
					sndot && \
					backup_rsync -avrhP --delete "$HOME"/ag-sys/ "$HOME"/ag-sys-bk && \
					echo "Backup of soma to $usb_location completed succesfully." || \
					echo "bahamut failed."
					umount_tc "$usb_location"/soma && \
					if ! $no_eject; then
						maybe_eject
					fi
				fi
			else
				echo "Error. USB drive ${*: -1} is not mounted at $mountdir."
				return 1
			fi
		fi
	fi
}

# }}}

# quick net backup {{{
# ~8mb volume

function sin() {
	mountsoma && \
	mount_tc "$HOME"/omb_owncloud/smallest_soma_bk "$HOME"/smallest_bk && \
	sndot && \
	backup_rsync --exclude={".Trash/*",".git/*","gaming/*","large/*","chats/*","dotfiles/*"} --include={"*/","*.txt","*.org","*.tex","*.md","*.mkd","*.mkdn"} --exclude='*' "$HOME"/ag-sys/ "$HOME"/smallest_bk && \
	umount_tc "$HOME"/omb_owncloud/smallest_soma_bk && \
	# update modification time so will be accuate on places backed up to
	touch "$HOME"/omb_owncloud/smallest_soma_bk && \
	SpiderOak --batchmode --backup="$HOME/omb_owncloud/smallest_soma_bk" && \
	owncloudcmd $HOME/omb_owncloud https://cloud.openmailbox.org/
}

# }}}

# home backup {{{
# add music back; smarter soma sync; add important from mail, wine, etc.
# add more useless dirs to exclude
function snhometoexternal() {
	mountdir=/media
	while getopts :m:h opt
	do
		case $opt in
		m) mountdir=$OPTARG;;
		h) bkhelp && return 1;;
		*) echo "invalid option" && return 1;;
		esac
	done
	echo "Using --delete with rsync. Continue? (y/n)"
	read -q REPLY
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		return 1
	else
		exthd_loc=$mountdir/${*: -1}
		if [[ -d "$exthd_loc" ]]; then
			mkdir -p "$exthd_loc"/home_bk
			# if exclude *, won't transfer dir contents, by specifying /* (/ refering to the top of the from dir), the contents of the included folders will be transferred (because of -r)
			backup_rsync --include={".cabal/",".cards/",".gnupg/",".mail/",".mozilla/","_repos/","_school/","_/projects","anime/","dotfiles/",".gem/","Move/","Music/","ps_vita/","vimwiki/","wallpaper/","quicklisp/",".cargo/",".password-store "} --exclude="/*" --prune-empty-dirs ~/ "$exthd_loc/home_bk" || echo "snhometoexternal failed."
			# sync truecrypt volumes as well as well
			bahamut -m "$exthd_loc" -n home_bk
			sndatab -m "$exthd_loc" home_bk
		else
			echo "Error. External drive ${*: -1} is not mounted at $mountdir."
			return 1
		fi
	fi
}

function snhometoseagate() {
	snhometoexternal seagate
}
alias bkhsea="snhometoseagate"

function snhometobuffalo() {
	snhometoexternal "/media/HD-CEU2\ Backup"
}
alias bkhbuffalo="snhometobuffalo"

# }}}

# backup database to external harddrive {{{
function mountdatab() {
	mount_tc "$HOME"/datab "$HOME"/database
}
function umountdatab() {
	umount_tc ~/datab
}

function sndatab() {
	mountdir=/media
	while getopts :m:ho opt
	do
		case $opt in
		m) mountdir=$OPTARG;;
		h) bkhelp && return 1;;
		*) echo "invalid option" && return 1;;
		esac
	done
	echo "Using --delete with rsync. Continue? (y/n)"
	read -q REPLY
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]
	then
		return 1
	else
		exthd_loc=$mountdir/${*: -1}
		if [[ -d "$exthd_loc" ]]; then
			# if soma volume doesn't already exist, copy it over
			if [[ ! -f "$exthd_loc/datab" ]]; then
				umountdatab && \
				backup_rsync "$HOME"/datab "$exthd_loc" && \
				echo "Backup of datab to $exthd_loc completed succesfully." || \
				echo "sndatab failed."
			else
				mountdatab && \
 				mount_tc "$exthd_loc/datab" "$HOME"/database-bk && \
				sndot && \
				backup_rsync "$HOME"/database/ "$HOME"/database-bk && \
				echo "Backup of datab to $exthd_loc completed succesfully." || \
				echo "sndatab failed."
				umount_tc "$exthd_loc/datab"
			fi
		else
			echo "Error. External drive ${*: -1} is not mounted at $mountdir."
			return 1
		fi
	fi
}

function bkdatabtoseagate() {
	sndatab /media/seagate
}
alias bkdsea="bkdatabtoseagate"

function bkdatabtobuffalo() {
	sndatab /media/HD-CEU2\ Backup
}
alias bkdbuffalo="bkdatabtobuffalo"

# }}}

# psp backup {{{
# vita
alias cm="qcma --verbose"

snpsp() {
	echo "Using --delete with rsync. Continue? (y/n)"
	read -q REPLY
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		return 1
	else
		# trailing slash is needed
		psp_dir=$(echo "$1" | sed -r "s;/?$;/;")
		echo "$psp_dir"
		if [[ -d $psp_dir ]];then
			mountdatab && \
			# don't backup large games but do backup their names
			tree "$psp_dir"/ISO > "$psp_dir"/isos.txt && \
			ls "$psp_dir"/PSP/GAME/PSX > "$psp_dir"/psx.txt && \
			backup_rsync --exclude={"ISO/*","PSX/*"} "$psp_dir" \
				~/database/gaming/handheld/psp/backup/
		else
			echo "Error. Given directory does not exist."
			return 1
		fi
	fi
}

# }}}
# vim is dumb
# vim: ft=sh
